// source: user.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = function () {
  if (this) {
    return this;
  }
  if (typeof window !== 'undefined') {
    return window;
  }
  if (typeof global !== 'undefined') {
    return global;
  }
  if (typeof self !== 'undefined') {
    return self;
  }
  return Function('return this')();
}.call(null);

goog.exportSymbol('proto.user.CreateUserRequest', null, global);
goog.exportSymbol('proto.user.DeleteResponse', null, global);
goog.exportSymbol('proto.user.HealthRequest', null, global);
goog.exportSymbol('proto.user.HealthResponse', null, global);
goog.exportSymbol('proto.user.UpdateUserRequest', null, global);
goog.exportSymbol('proto.user.User', null, global);
goog.exportSymbol('proto.user.UserRequest', null, global);
goog.exportSymbol('proto.user.UserResponse', null, global);
goog.exportSymbol('proto.user.UsersRequest', null, global);
goog.exportSymbol('proto.user.UsersResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.HealthRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.HealthRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.HealthRequest.displayName = 'proto.user.HealthRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.HealthResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.HealthResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.HealthResponse.displayName = 'proto.user.HealthResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.UserRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.UserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.UserRequest.displayName = 'proto.user.UserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.UsersRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.UsersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.UsersRequest.displayName = 'proto.user.UsersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.UpdateUserRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.UpdateUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.UpdateUserRequest.displayName = 'proto.user.UpdateUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.CreateUserRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.CreateUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.CreateUserRequest.displayName = 'proto.user.CreateUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.UserResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.UserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.UserResponse.displayName = 'proto.user.UserResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.UsersResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.user.UsersResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.user.UsersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.UsersResponse.displayName = 'proto.user.UsersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.DeleteResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.DeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.DeleteResponse.displayName = 'proto.user.DeleteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.User = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.User.displayName = 'proto.user.User';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.HealthRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.user.HealthRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.HealthRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.HealthRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        service: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.HealthRequest}
 */
proto.user.HealthRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.HealthRequest();
  return proto.user.HealthRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.HealthRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.HealthRequest}
 */
proto.user.HealthRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setService(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.HealthRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.HealthRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.HealthRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.HealthRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getService();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string service = 1;
 * @return {string}
 */
proto.user.HealthRequest.prototype.getService = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.HealthRequest} returns this
 */
proto.user.HealthRequest.prototype.setService = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.HealthResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.user.HealthResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.HealthResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.HealthResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        status: jspb.Message.getFieldWithDefault(msg, 1, ''),
        message: jspb.Message.getFieldWithDefault(msg, 2, ''),
        timestamp: jspb.Message.getFieldWithDefault(msg, 3, ''),
        usercount: jspb.Message.getFieldWithDefault(msg, 4, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.HealthResponse}
 */
proto.user.HealthResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.HealthResponse();
  return proto.user.HealthResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.HealthResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.HealthResponse}
 */
proto.user.HealthResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setStatus(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setTimestamp(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setUsercount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.HealthResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.HealthResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.HealthResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.HealthResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getUsercount();
  if (f !== 0) {
    writer.writeInt32(4, f);
  }
};

/**
 * optional string status = 1;
 * @return {string}
 */
proto.user.HealthResponse.prototype.getStatus = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.HealthResponse} returns this
 */
proto.user.HealthResponse.prototype.setStatus = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.user.HealthResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.HealthResponse} returns this
 */
proto.user.HealthResponse.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string timestamp = 3;
 * @return {string}
 */
proto.user.HealthResponse.prototype.getTimestamp = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.HealthResponse} returns this
 */
proto.user.HealthResponse.prototype.setTimestamp = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional int32 userCount = 4;
 * @return {number}
 */
proto.user.HealthResponse.prototype.getUsercount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.user.HealthResponse} returns this
 */
proto.user.HealthResponse.prototype.setUsercount = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.UserRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.user.UserRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.UserRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.UserRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        userid: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.UserRequest}
 */
proto.user.UserRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.UserRequest();
  return proto.user.UserRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.UserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.UserRequest}
 */
proto.user.UserRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserid(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.UserRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.UserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.UserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.UserRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string userId = 1;
 * @return {string}
 */
proto.user.UserRequest.prototype.getUserid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.UserRequest} returns this
 */
proto.user.UserRequest.prototype.setUserid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.UsersRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.user.UsersRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.UsersRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.UsersRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        page: jspb.Message.getFieldWithDefault(msg, 1, 0),
        limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
        role: jspb.Message.getFieldWithDefault(msg, 3, ''),
        search: jspb.Message.getFieldWithDefault(msg, 4, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.UsersRequest}
 */
proto.user.UsersRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.UsersRequest();
  return proto.user.UsersRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.UsersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.UsersRequest}
 */
proto.user.UsersRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPage(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setLimit(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setRole(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setSearch(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.UsersRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.UsersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.UsersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.UsersRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(2, f);
  }
  f = message.getRole();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getSearch();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional int32 page = 1;
 * @return {number}
 */
proto.user.UsersRequest.prototype.getPage = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.user.UsersRequest} returns this
 */
proto.user.UsersRequest.prototype.setPage = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int32 limit = 2;
 * @return {number}
 */
proto.user.UsersRequest.prototype.getLimit = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.user.UsersRequest} returns this
 */
proto.user.UsersRequest.prototype.setLimit = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional string role = 3;
 * @return {string}
 */
proto.user.UsersRequest.prototype.getRole = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.UsersRequest} returns this
 */
proto.user.UsersRequest.prototype.setRole = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string search = 4;
 * @return {string}
 */
proto.user.UsersRequest.prototype.getSearch = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.UsersRequest} returns this
 */
proto.user.UsersRequest.prototype.setSearch = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.UpdateUserRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.user.UpdateUserRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.UpdateUserRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.UpdateUserRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        userid: jspb.Message.getFieldWithDefault(msg, 1, ''),
        firstname: jspb.Message.getFieldWithDefault(msg, 2, ''),
        lastname: jspb.Message.getFieldWithDefault(msg, 3, ''),
        phonenumber: jspb.Message.getFieldWithDefault(msg, 4, ''),
        role: jspb.Message.getFieldWithDefault(msg, 5, ''),
        isactive: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
        customfieldsMap: (f = msg.getCustomfieldsMap())
          ? f.toObject(includeInstance, undefined)
          : [],
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.UpdateUserRequest}
 */
proto.user.UpdateUserRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.UpdateUserRequest();
  return proto.user.UpdateUserRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.UpdateUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.UpdateUserRequest}
 */
proto.user.UpdateUserRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserid(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setFirstname(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setLastname(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setPhonenumber(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setRole(value);
        break;
      case 6:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsactive(value);
        break;
      case 7:
        var value = msg.getCustomfieldsMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            '',
            ''
          );
        });
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.UpdateUserRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.UpdateUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.UpdateUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.UpdateUserRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getFirstname();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getLastname();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getPhonenumber();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getRole();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getIsactive();
  if (f) {
    writer.writeBool(6, f);
  }
  f = message.getCustomfieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      7,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeString
    );
  }
};

/**
 * optional string userId = 1;
 * @return {string}
 */
proto.user.UpdateUserRequest.prototype.getUserid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.UpdateUserRequest} returns this
 */
proto.user.UpdateUserRequest.prototype.setUserid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string firstName = 2;
 * @return {string}
 */
proto.user.UpdateUserRequest.prototype.getFirstname = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.UpdateUserRequest} returns this
 */
proto.user.UpdateUserRequest.prototype.setFirstname = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string lastName = 3;
 * @return {string}
 */
proto.user.UpdateUserRequest.prototype.getLastname = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.UpdateUserRequest} returns this
 */
proto.user.UpdateUserRequest.prototype.setLastname = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string phoneNumber = 4;
 * @return {string}
 */
proto.user.UpdateUserRequest.prototype.getPhonenumber = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.UpdateUserRequest} returns this
 */
proto.user.UpdateUserRequest.prototype.setPhonenumber = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string role = 5;
 * @return {string}
 */
proto.user.UpdateUserRequest.prototype.getRole = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.UpdateUserRequest} returns this
 */
proto.user.UpdateUserRequest.prototype.setRole = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional bool isActive = 6;
 * @return {boolean}
 */
proto.user.UpdateUserRequest.prototype.getIsactive = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 6, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.UpdateUserRequest} returns this
 */
proto.user.UpdateUserRequest.prototype.setIsactive = function (value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};

/**
 * map<string, string> customFields = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.user.UpdateUserRequest.prototype.getCustomfieldsMap = function (
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,string>} */ (
    jspb.Message.getMapField(this, 7, opt_noLazyCreate, null)
  );
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.user.UpdateUserRequest} returns this
 */
proto.user.UpdateUserRequest.prototype.clearCustomfieldsMap = function () {
  this.getCustomfieldsMap().clear();
  return this;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.CreateUserRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.user.CreateUserRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.CreateUserRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.CreateUserRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        email: jspb.Message.getFieldWithDefault(msg, 1, ''),
        password: jspb.Message.getFieldWithDefault(msg, 2, ''),
        firstname: jspb.Message.getFieldWithDefault(msg, 3, ''),
        lastname: jspb.Message.getFieldWithDefault(msg, 4, ''),
        phonenumber: jspb.Message.getFieldWithDefault(msg, 5, ''),
        role: jspb.Message.getFieldWithDefault(msg, 6, ''),
        customfieldsMap: (f = msg.getCustomfieldsMap())
          ? f.toObject(includeInstance, undefined)
          : [],
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.CreateUserRequest}
 */
proto.user.CreateUserRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.CreateUserRequest();
  return proto.user.CreateUserRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.CreateUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.CreateUserRequest}
 */
proto.user.CreateUserRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setEmail(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPassword(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setFirstname(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setLastname(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setPhonenumber(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setRole(value);
        break;
      case 7:
        var value = msg.getCustomfieldsMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            '',
            ''
          );
        });
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.CreateUserRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.CreateUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.CreateUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.CreateUserRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getFirstname();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getLastname();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getPhonenumber();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getRole();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
  f = message.getCustomfieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      7,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeString
    );
  }
};

/**
 * optional string email = 1;
 * @return {string}
 */
proto.user.CreateUserRequest.prototype.getEmail = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.CreateUserRequest} returns this
 */
proto.user.CreateUserRequest.prototype.setEmail = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string password = 2;
 * @return {string}
 */
proto.user.CreateUserRequest.prototype.getPassword = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.CreateUserRequest} returns this
 */
proto.user.CreateUserRequest.prototype.setPassword = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string firstName = 3;
 * @return {string}
 */
proto.user.CreateUserRequest.prototype.getFirstname = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.CreateUserRequest} returns this
 */
proto.user.CreateUserRequest.prototype.setFirstname = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string lastName = 4;
 * @return {string}
 */
proto.user.CreateUserRequest.prototype.getLastname = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.CreateUserRequest} returns this
 */
proto.user.CreateUserRequest.prototype.setLastname = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string phoneNumber = 5;
 * @return {string}
 */
proto.user.CreateUserRequest.prototype.getPhonenumber = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.CreateUserRequest} returns this
 */
proto.user.CreateUserRequest.prototype.setPhonenumber = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string role = 6;
 * @return {string}
 */
proto.user.CreateUserRequest.prototype.getRole = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.CreateUserRequest} returns this
 */
proto.user.CreateUserRequest.prototype.setRole = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * map<string, string> customFields = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.user.CreateUserRequest.prototype.getCustomfieldsMap = function (
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,string>} */ (
    jspb.Message.getMapField(this, 7, opt_noLazyCreate, null)
  );
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.user.CreateUserRequest} returns this
 */
proto.user.CreateUserRequest.prototype.clearCustomfieldsMap = function () {
  this.getCustomfieldsMap().clear();
  return this;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.UserResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.user.UserResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.UserResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.UserResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        message: jspb.Message.getFieldWithDefault(msg, 2, ''),
        user:
          (f = msg.getUser()) && proto.user.User.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.UserResponse}
 */
proto.user.UserResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.UserResponse();
  return proto.user.UserResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.UserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.UserResponse}
 */
proto.user.UserResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 3:
        var value = new proto.user.User();
        reader.readMessage(value, proto.user.User.deserializeBinaryFromReader);
        msg.setUser(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.UserResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.UserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.UserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.UserResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(3, f, proto.user.User.serializeBinaryToWriter);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.user.UserResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.UserResponse} returns this
 */
proto.user.UserResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.user.UserResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.UserResponse} returns this
 */
proto.user.UserResponse.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional User user = 3;
 * @return {?proto.user.User}
 */
proto.user.UserResponse.prototype.getUser = function () {
  return /** @type{?proto.user.User} */ (
    jspb.Message.getWrapperField(this, proto.user.User, 3)
  );
};

/**
 * @param {?proto.user.User|undefined} value
 * @return {!proto.user.UserResponse} returns this
 */
proto.user.UserResponse.prototype.setUser = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.user.UserResponse} returns this
 */
proto.user.UserResponse.prototype.clearUser = function () {
  return this.setUser(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.user.UserResponse.prototype.hasUser = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.UsersResponse.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.UsersResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.user.UsersResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.UsersResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.UsersResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        usersList: jspb.Message.toObjectList(
          msg.getUsersList(),
          proto.user.User.toObject,
          includeInstance
        ),
        total: jspb.Message.getFieldWithDefault(msg, 3, 0),
        page: jspb.Message.getFieldWithDefault(msg, 4, 0),
        limit: jspb.Message.getFieldWithDefault(msg, 5, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.UsersResponse}
 */
proto.user.UsersResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.UsersResponse();
  return proto.user.UsersResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.UsersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.UsersResponse}
 */
proto.user.UsersResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = new proto.user.User();
        reader.readMessage(value, proto.user.User.deserializeBinaryFromReader);
        msg.addUsers(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setTotal(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPage(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setLimit(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.UsersResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.UsersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.UsersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.UsersResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.user.User.serializeBinaryToWriter);
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(3, f);
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(4, f);
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(5, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.user.UsersResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.UsersResponse} returns this
 */
proto.user.UsersResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * repeated User users = 2;
 * @return {!Array<!proto.user.User>}
 */
proto.user.UsersResponse.prototype.getUsersList = function () {
  return /** @type{!Array<!proto.user.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.user.User, 2)
  );
};

/**
 * @param {!Array<!proto.user.User>} value
 * @return {!proto.user.UsersResponse} returns this
 */
proto.user.UsersResponse.prototype.setUsersList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.user.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.user.User}
 */
proto.user.UsersResponse.prototype.addUsers = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.user.User,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.UsersResponse} returns this
 */
proto.user.UsersResponse.prototype.clearUsersList = function () {
  return this.setUsersList([]);
};

/**
 * optional int32 total = 3;
 * @return {number}
 */
proto.user.UsersResponse.prototype.getTotal = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.user.UsersResponse} returns this
 */
proto.user.UsersResponse.prototype.setTotal = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional int32 page = 4;
 * @return {number}
 */
proto.user.UsersResponse.prototype.getPage = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.user.UsersResponse} returns this
 */
proto.user.UsersResponse.prototype.setPage = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional int32 limit = 5;
 * @return {number}
 */
proto.user.UsersResponse.prototype.getLimit = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.user.UsersResponse} returns this
 */
proto.user.UsersResponse.prototype.setLimit = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.DeleteResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.user.DeleteResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.DeleteResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.DeleteResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        message: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.DeleteResponse}
 */
proto.user.DeleteResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.DeleteResponse();
  return proto.user.DeleteResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.DeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.DeleteResponse}
 */
proto.user.DeleteResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.DeleteResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.DeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.DeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.DeleteResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.user.DeleteResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.DeleteResponse} returns this
 */
proto.user.DeleteResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.user.DeleteResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.DeleteResponse} returns this
 */
proto.user.DeleteResponse.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.User.prototype.toObject = function (opt_includeInstance) {
    return proto.user.User.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.User} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.User.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
        email: jspb.Message.getFieldWithDefault(msg, 2, ''),
        firstname: jspb.Message.getFieldWithDefault(msg, 3, ''),
        lastname: jspb.Message.getFieldWithDefault(msg, 4, ''),
        phonenumber: jspb.Message.getFieldWithDefault(msg, 5, ''),
        role: jspb.Message.getFieldWithDefault(msg, 6, ''),
        isactive: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
        customfieldsMap: (f = msg.getCustomfieldsMap())
          ? f.toObject(includeInstance, undefined)
          : [],
        createdat: jspb.Message.getFieldWithDefault(msg, 9, ''),
        updatedat: jspb.Message.getFieldWithDefault(msg, 10, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.User}
 */
proto.user.User.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.User();
  return proto.user.User.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.User}
 */
proto.user.User.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setEmail(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setFirstname(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setLastname(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setPhonenumber(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setRole(value);
        break;
      case 7:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsactive(value);
        break;
      case 8:
        var value = msg.getCustomfieldsMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            '',
            ''
          );
        });
        break;
      case 9:
        var value = /** @type {string} */ (reader.readString());
        msg.setCreatedat(value);
        break;
      case 10:
        var value = /** @type {string} */ (reader.readString());
        msg.setUpdatedat(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.User.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.User.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getFirstname();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getLastname();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getPhonenumber();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getRole();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
  f = message.getIsactive();
  if (f) {
    writer.writeBool(7, f);
  }
  f = message.getCustomfieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      8,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeString
    );
  }
  f = message.getCreatedat();
  if (f.length > 0) {
    writer.writeString(9, f);
  }
  f = message.getUpdatedat();
  if (f.length > 0) {
    writer.writeString(10, f);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.user.User.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string email = 2;
 * @return {string}
 */
proto.user.User.prototype.getEmail = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setEmail = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string firstName = 3;
 * @return {string}
 */
proto.user.User.prototype.getFirstname = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setFirstname = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string lastName = 4;
 * @return {string}
 */
proto.user.User.prototype.getLastname = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setLastname = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string phoneNumber = 5;
 * @return {string}
 */
proto.user.User.prototype.getPhonenumber = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setPhonenumber = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string role = 6;
 * @return {string}
 */
proto.user.User.prototype.getRole = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setRole = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional bool isActive = 7;
 * @return {boolean}
 */
proto.user.User.prototype.getIsactive = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 7, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setIsactive = function (value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};

/**
 * map<string, string> customFields = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.user.User.prototype.getCustomfieldsMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
    jspb.Message.getMapField(this, 8, opt_noLazyCreate, null)
  );
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.clearCustomfieldsMap = function () {
  this.getCustomfieldsMap().clear();
  return this;
};

/**
 * optional string createdAt = 9;
 * @return {string}
 */
proto.user.User.prototype.getCreatedat = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setCreatedat = function (value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};

/**
 * optional string updatedAt = 10;
 * @return {string}
 */
proto.user.User.prototype.getUpdatedat = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setUpdatedat = function (value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};

goog.object.extend(exports, proto.user);
