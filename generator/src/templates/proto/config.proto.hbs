syntax = "proto3";

package config;

service ConfigService {
  rpc HealthCheck (HealthRequest) returns (HealthResponse) {};
  rpc GetConfig (ConfigRequest) returns (ConfigResponse) {};
  rpc UpdateConfig (UpdateConfigRequest) returns (ConfigResponse) {};
  rpc GetFeeConfig (FeeConfigRequest) returns (FeeConfigResponse) {};
  rpc UpdateFeeConfig (UpdateFeeConfigRequest) returns (FeeConfigResponse) {};
  rpc GetSystemConfig (SystemConfigRequest) returns (SystemConfigResponse) {};
}

message HealthRequest {
  string service = 1;
}

message HealthResponse {
  string status = 1;
  string message = 2;
  string timestamp = 3;
  int32 configCount = 4;
  int32 feeConfigCount = 5;
}

message ConfigRequest {
  string key = 1;
}

message UpdateConfigRequest {
  string key = 1;
  string value = 2;
}

message FeeConfigRequest {
  string terminal = 1;
  string vehicleType = 2;
}

message UpdateFeeConfigRequest {
  string terminal = 1;
  string vehicleType = 2;
  string divisionType = 3;
  double platformShare = 4;
  double airportShare = 5;
  double minFee = 6;
  double maxFee = 7;
  repeated string applicableTerminals = 8;
  repeated string applicableVehicleTypes = 9;
}

message SystemConfigRequest {
  string section = 1;
}

message ConfigResponse {
  bool success = 1;
  string message = 2;
  Config config = 3;
}

message FeeConfigResponse {
  bool success = 1;
  string message = 2;
  FeeConfig config = 3;
}

message SystemConfigResponse {
  bool success = 1;
  string message = 2;
  map<string, string> configs = 3;
}

message Config {
  string key = 1;
  string value = 2;
  string updatedAt = 3;
  string description = 4;
}

message FeeConfig {
  string terminal = 1;
  string vehicleType = 2;
  string divisionType = 3;
  double platformShare = 4;
  double airportShare = 5;
  double minFee = 6;
  double maxFee = 7;
  repeated string applicableTerminals = 8;
  repeated string applicableVehicleTypes = 9;
  string updatedAt = 10;
  bool isActive = 11;
}