// source: payment.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = function () {
  if (this) {
    return this;
  }
  if (typeof window !== 'undefined') {
    return window;
  }
  if (typeof global !== 'undefined') {
    return global;
  }
  if (typeof self !== 'undefined') {
    return self;
  }
  return Function('return this')();
}.call(null);

goog.exportSymbol('proto.payment.BalanceResponse', null, global);
goog.exportSymbol('proto.payment.DriverBalanceRequest', null, global);
goog.exportSymbol('proto.payment.DriverPaymentsQuery', null, global);
goog.exportSymbol('proto.payment.HealthRequest', null, global);
goog.exportSymbol('proto.payment.HealthResponse', null, global);
goog.exportSymbol('proto.payment.Payment', null, global);
goog.exportSymbol('proto.payment.PaymentQuery', null, global);
goog.exportSymbol('proto.payment.PaymentRequest', null, global);
goog.exportSymbol('proto.payment.PaymentResponse', null, global);
goog.exportSymbol('proto.payment.PaymentsResponse', null, global);
goog.exportSymbol('proto.payment.RefundRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.HealthRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.HealthRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.HealthRequest.displayName = 'proto.payment.HealthRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.HealthResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.HealthResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.HealthResponse.displayName = 'proto.payment.HealthResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.PaymentRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.PaymentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.PaymentRequest.displayName = 'proto.payment.PaymentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.PaymentQuery = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.PaymentQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.PaymentQuery.displayName = 'proto.payment.PaymentQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.DriverPaymentsQuery = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.DriverPaymentsQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.DriverPaymentsQuery.displayName =
    'proto.payment.DriverPaymentsQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.RefundRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.RefundRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.RefundRequest.displayName = 'proto.payment.RefundRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.DriverBalanceRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.DriverBalanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.DriverBalanceRequest.displayName =
    'proto.payment.DriverBalanceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.PaymentResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.PaymentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.PaymentResponse.displayName = 'proto.payment.PaymentResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.PaymentsResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.payment.PaymentsResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.payment.PaymentsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.PaymentsResponse.displayName = 'proto.payment.PaymentsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.BalanceResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.BalanceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.BalanceResponse.displayName = 'proto.payment.BalanceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.Payment = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.Payment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.Payment.displayName = 'proto.payment.Payment';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.payment.HealthRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.payment.HealthRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.payment.HealthRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.payment.HealthRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        service: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.HealthRequest}
 */
proto.payment.HealthRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.HealthRequest();
  return proto.payment.HealthRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.HealthRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.HealthRequest}
 */
proto.payment.HealthRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setService(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.HealthRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.payment.HealthRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.HealthRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.HealthRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getService();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string service = 1;
 * @return {string}
 */
proto.payment.HealthRequest.prototype.getService = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.HealthRequest} returns this
 */
proto.payment.HealthRequest.prototype.setService = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.payment.HealthResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.payment.HealthResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.payment.HealthResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.payment.HealthResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        status: jspb.Message.getFieldWithDefault(msg, 1, ''),
        message: jspb.Message.getFieldWithDefault(msg, 2, ''),
        timestamp: jspb.Message.getFieldWithDefault(msg, 3, ''),
        paymentcount: jspb.Message.getFieldWithDefault(msg, 4, 0),
        drivercount: jspb.Message.getFieldWithDefault(msg, 5, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.HealthResponse}
 */
proto.payment.HealthResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.HealthResponse();
  return proto.payment.HealthResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.HealthResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.HealthResponse}
 */
proto.payment.HealthResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setStatus(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setTimestamp(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPaymentcount(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setDrivercount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.HealthResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.payment.HealthResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.HealthResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.HealthResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getPaymentcount();
  if (f !== 0) {
    writer.writeInt32(4, f);
  }
  f = message.getDrivercount();
  if (f !== 0) {
    writer.writeInt32(5, f);
  }
};

/**
 * optional string status = 1;
 * @return {string}
 */
proto.payment.HealthResponse.prototype.getStatus = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.HealthResponse} returns this
 */
proto.payment.HealthResponse.prototype.setStatus = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.payment.HealthResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.HealthResponse} returns this
 */
proto.payment.HealthResponse.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string timestamp = 3;
 * @return {string}
 */
proto.payment.HealthResponse.prototype.getTimestamp = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.HealthResponse} returns this
 */
proto.payment.HealthResponse.prototype.setTimestamp = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional int32 paymentCount = 4;
 * @return {number}
 */
proto.payment.HealthResponse.prototype.getPaymentcount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.payment.HealthResponse} returns this
 */
proto.payment.HealthResponse.prototype.setPaymentcount = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional int32 driverCount = 5;
 * @return {number}
 */
proto.payment.HealthResponse.prototype.getDrivercount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.payment.HealthResponse} returns this
 */
proto.payment.HealthResponse.prototype.setDrivercount = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.payment.PaymentRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.payment.PaymentRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.payment.PaymentRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.payment.PaymentRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        driverid: jspb.Message.getFieldWithDefault(msg, 1, ''),
        amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
        terminal: jspb.Message.getFieldWithDefault(msg, 3, ''),
        description: jspb.Message.getFieldWithDefault(msg, 4, ''),
        vehicletype: jspb.Message.getFieldWithDefault(msg, 5, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.PaymentRequest}
 */
proto.payment.PaymentRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.PaymentRequest();
  return proto.payment.PaymentRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.PaymentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.PaymentRequest}
 */
proto.payment.PaymentRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setDriverid(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setAmount(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setTerminal(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setDescription(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setVehicletype(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.PaymentRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.payment.PaymentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.PaymentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.PaymentRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getDriverid();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(2, f);
  }
  f = message.getTerminal();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getVehicletype();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional string driverId = 1;
 * @return {string}
 */
proto.payment.PaymentRequest.prototype.getDriverid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.PaymentRequest} returns this
 */
proto.payment.PaymentRequest.prototype.setDriverid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional double amount = 2;
 * @return {number}
 */
proto.payment.PaymentRequest.prototype.getAmount = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.payment.PaymentRequest} returns this
 */
proto.payment.PaymentRequest.prototype.setAmount = function (value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};

/**
 * optional string terminal = 3;
 * @return {string}
 */
proto.payment.PaymentRequest.prototype.getTerminal = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.PaymentRequest} returns this
 */
proto.payment.PaymentRequest.prototype.setTerminal = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string description = 4;
 * @return {string}
 */
proto.payment.PaymentRequest.prototype.getDescription = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.PaymentRequest} returns this
 */
proto.payment.PaymentRequest.prototype.setDescription = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string vehicleType = 5;
 * @return {string}
 */
proto.payment.PaymentRequest.prototype.getVehicletype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.PaymentRequest} returns this
 */
proto.payment.PaymentRequest.prototype.setVehicletype = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.payment.PaymentQuery.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.payment.PaymentQuery.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.payment.PaymentQuery} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.payment.PaymentQuery.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        paymentid: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.PaymentQuery}
 */
proto.payment.PaymentQuery.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.PaymentQuery();
  return proto.payment.PaymentQuery.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.PaymentQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.PaymentQuery}
 */
proto.payment.PaymentQuery.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setPaymentid(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.PaymentQuery.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.payment.PaymentQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.PaymentQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.PaymentQuery.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getPaymentid();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string paymentId = 1;
 * @return {string}
 */
proto.payment.PaymentQuery.prototype.getPaymentid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.PaymentQuery} returns this
 */
proto.payment.PaymentQuery.prototype.setPaymentid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.payment.DriverPaymentsQuery.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.payment.DriverPaymentsQuery.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.payment.DriverPaymentsQuery} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.payment.DriverPaymentsQuery.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        driverid: jspb.Message.getFieldWithDefault(msg, 1, ''),
        page: jspb.Message.getFieldWithDefault(msg, 2, 0),
        limit: jspb.Message.getFieldWithDefault(msg, 3, 0),
        status: jspb.Message.getFieldWithDefault(msg, 4, ''),
        startdate: jspb.Message.getFieldWithDefault(msg, 5, ''),
        enddate: jspb.Message.getFieldWithDefault(msg, 6, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.DriverPaymentsQuery}
 */
proto.payment.DriverPaymentsQuery.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.DriverPaymentsQuery();
  return proto.payment.DriverPaymentsQuery.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.DriverPaymentsQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.DriverPaymentsQuery}
 */
proto.payment.DriverPaymentsQuery.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setDriverid(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPage(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setLimit(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setStatus(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setStartdate(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setEnddate(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.DriverPaymentsQuery.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.payment.DriverPaymentsQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.DriverPaymentsQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.DriverPaymentsQuery.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getDriverid();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(2, f);
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(3, f);
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getStartdate();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getEnddate();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
};

/**
 * optional string driverId = 1;
 * @return {string}
 */
proto.payment.DriverPaymentsQuery.prototype.getDriverid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.DriverPaymentsQuery} returns this
 */
proto.payment.DriverPaymentsQuery.prototype.setDriverid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional int32 page = 2;
 * @return {number}
 */
proto.payment.DriverPaymentsQuery.prototype.getPage = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.payment.DriverPaymentsQuery} returns this
 */
proto.payment.DriverPaymentsQuery.prototype.setPage = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional int32 limit = 3;
 * @return {number}
 */
proto.payment.DriverPaymentsQuery.prototype.getLimit = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.payment.DriverPaymentsQuery} returns this
 */
proto.payment.DriverPaymentsQuery.prototype.setLimit = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional string status = 4;
 * @return {string}
 */
proto.payment.DriverPaymentsQuery.prototype.getStatus = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.DriverPaymentsQuery} returns this
 */
proto.payment.DriverPaymentsQuery.prototype.setStatus = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string startDate = 5;
 * @return {string}
 */
proto.payment.DriverPaymentsQuery.prototype.getStartdate = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.DriverPaymentsQuery} returns this
 */
proto.payment.DriverPaymentsQuery.prototype.setStartdate = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string endDate = 6;
 * @return {string}
 */
proto.payment.DriverPaymentsQuery.prototype.getEnddate = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.DriverPaymentsQuery} returns this
 */
proto.payment.DriverPaymentsQuery.prototype.setEnddate = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.payment.RefundRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.payment.RefundRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.payment.RefundRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.payment.RefundRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        paymentid: jspb.Message.getFieldWithDefault(msg, 1, ''),
        reason: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.RefundRequest}
 */
proto.payment.RefundRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.RefundRequest();
  return proto.payment.RefundRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.RefundRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.RefundRequest}
 */
proto.payment.RefundRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setPaymentid(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setReason(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.RefundRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.payment.RefundRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.RefundRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.RefundRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getPaymentid();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string paymentId = 1;
 * @return {string}
 */
proto.payment.RefundRequest.prototype.getPaymentid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.RefundRequest} returns this
 */
proto.payment.RefundRequest.prototype.setPaymentid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string reason = 2;
 * @return {string}
 */
proto.payment.RefundRequest.prototype.getReason = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.RefundRequest} returns this
 */
proto.payment.RefundRequest.prototype.setReason = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.payment.DriverBalanceRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.payment.DriverBalanceRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.payment.DriverBalanceRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.payment.DriverBalanceRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        driverid: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.DriverBalanceRequest}
 */
proto.payment.DriverBalanceRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.DriverBalanceRequest();
  return proto.payment.DriverBalanceRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.DriverBalanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.DriverBalanceRequest}
 */
proto.payment.DriverBalanceRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setDriverid(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.DriverBalanceRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.payment.DriverBalanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.DriverBalanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.DriverBalanceRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getDriverid();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string driverId = 1;
 * @return {string}
 */
proto.payment.DriverBalanceRequest.prototype.getDriverid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.DriverBalanceRequest} returns this
 */
proto.payment.DriverBalanceRequest.prototype.setDriverid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.payment.PaymentResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.payment.PaymentResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.payment.PaymentResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.payment.PaymentResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        message: jspb.Message.getFieldWithDefault(msg, 2, ''),
        payment:
          (f = msg.getPayment()) &&
          proto.payment.Payment.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.PaymentResponse}
 */
proto.payment.PaymentResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.PaymentResponse();
  return proto.payment.PaymentResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.PaymentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.PaymentResponse}
 */
proto.payment.PaymentResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 3:
        var value = new proto.payment.Payment();
        reader.readMessage(
          value,
          proto.payment.Payment.deserializeBinaryFromReader
        );
        msg.setPayment(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.PaymentResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.payment.PaymentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.PaymentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.PaymentResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getPayment();
  if (f != null) {
    writer.writeMessage(3, f, proto.payment.Payment.serializeBinaryToWriter);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.payment.PaymentResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.payment.PaymentResponse} returns this
 */
proto.payment.PaymentResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.payment.PaymentResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.PaymentResponse} returns this
 */
proto.payment.PaymentResponse.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional Payment payment = 3;
 * @return {?proto.payment.Payment}
 */
proto.payment.PaymentResponse.prototype.getPayment = function () {
  return /** @type{?proto.payment.Payment} */ (
    jspb.Message.getWrapperField(this, proto.payment.Payment, 3)
  );
};

/**
 * @param {?proto.payment.Payment|undefined} value
 * @return {!proto.payment.PaymentResponse} returns this
 */
proto.payment.PaymentResponse.prototype.setPayment = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.payment.PaymentResponse} returns this
 */
proto.payment.PaymentResponse.prototype.clearPayment = function () {
  return this.setPayment(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payment.PaymentResponse.prototype.hasPayment = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.payment.PaymentsResponse.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.payment.PaymentsResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.payment.PaymentsResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.payment.PaymentsResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.payment.PaymentsResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        paymentsList: jspb.Message.toObjectList(
          msg.getPaymentsList(),
          proto.payment.Payment.toObject,
          includeInstance
        ),
        total: jspb.Message.getFieldWithDefault(msg, 3, 0),
        page: jspb.Message.getFieldWithDefault(msg, 4, 0),
        limit: jspb.Message.getFieldWithDefault(msg, 5, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.PaymentsResponse}
 */
proto.payment.PaymentsResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.PaymentsResponse();
  return proto.payment.PaymentsResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.PaymentsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.PaymentsResponse}
 */
proto.payment.PaymentsResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = new proto.payment.Payment();
        reader.readMessage(
          value,
          proto.payment.Payment.deserializeBinaryFromReader
        );
        msg.addPayments(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setTotal(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPage(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setLimit(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.PaymentsResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.payment.PaymentsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.PaymentsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.PaymentsResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getPaymentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.payment.Payment.serializeBinaryToWriter
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(3, f);
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(4, f);
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(5, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.payment.PaymentsResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.payment.PaymentsResponse} returns this
 */
proto.payment.PaymentsResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * repeated Payment payments = 2;
 * @return {!Array<!proto.payment.Payment>}
 */
proto.payment.PaymentsResponse.prototype.getPaymentsList = function () {
  return /** @type{!Array<!proto.payment.Payment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.payment.Payment, 2)
  );
};

/**
 * @param {!Array<!proto.payment.Payment>} value
 * @return {!proto.payment.PaymentsResponse} returns this
 */
proto.payment.PaymentsResponse.prototype.setPaymentsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.payment.Payment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.payment.Payment}
 */
proto.payment.PaymentsResponse.prototype.addPayments = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.payment.Payment,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.payment.PaymentsResponse} returns this
 */
proto.payment.PaymentsResponse.prototype.clearPaymentsList = function () {
  return this.setPaymentsList([]);
};

/**
 * optional int32 total = 3;
 * @return {number}
 */
proto.payment.PaymentsResponse.prototype.getTotal = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.payment.PaymentsResponse} returns this
 */
proto.payment.PaymentsResponse.prototype.setTotal = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional int32 page = 4;
 * @return {number}
 */
proto.payment.PaymentsResponse.prototype.getPage = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.payment.PaymentsResponse} returns this
 */
proto.payment.PaymentsResponse.prototype.setPage = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional int32 limit = 5;
 * @return {number}
 */
proto.payment.PaymentsResponse.prototype.getLimit = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.payment.PaymentsResponse} returns this
 */
proto.payment.PaymentsResponse.prototype.setLimit = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.payment.BalanceResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.payment.BalanceResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.payment.BalanceResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.payment.BalanceResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        message: jspb.Message.getFieldWithDefault(msg, 2, ''),
        balance: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
        currency: jspb.Message.getFieldWithDefault(msg, 4, ''),
        driverid: jspb.Message.getFieldWithDefault(msg, 5, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.BalanceResponse}
 */
proto.payment.BalanceResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.BalanceResponse();
  return proto.payment.BalanceResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.BalanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.BalanceResponse}
 */
proto.payment.BalanceResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setBalance(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setCurrency(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setDriverid(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.BalanceResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.payment.BalanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.BalanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.BalanceResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getBalance();
  if (f !== 0.0) {
    writer.writeDouble(3, f);
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getDriverid();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.payment.BalanceResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.payment.BalanceResponse} returns this
 */
proto.payment.BalanceResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.payment.BalanceResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.BalanceResponse} returns this
 */
proto.payment.BalanceResponse.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional double balance = 3;
 * @return {number}
 */
proto.payment.BalanceResponse.prototype.getBalance = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.payment.BalanceResponse} returns this
 */
proto.payment.BalanceResponse.prototype.setBalance = function (value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};

/**
 * optional string currency = 4;
 * @return {string}
 */
proto.payment.BalanceResponse.prototype.getCurrency = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.BalanceResponse} returns this
 */
proto.payment.BalanceResponse.prototype.setCurrency = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string driverId = 5;
 * @return {string}
 */
proto.payment.BalanceResponse.prototype.getDriverid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.BalanceResponse} returns this
 */
proto.payment.BalanceResponse.prototype.setDriverid = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.payment.Payment.prototype.toObject = function (opt_includeInstance) {
    return proto.payment.Payment.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.payment.Payment} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.payment.Payment.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
        driverid: jspb.Message.getFieldWithDefault(msg, 2, ''),
        amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
        platformcommission: jspb.Message.getFloatingPointFieldWithDefault(
          msg,
          4,
          0.0
        ),
        airportportion: jspb.Message.getFloatingPointFieldWithDefault(
          msg,
          5,
          0.0
        ),
        terminal: jspb.Message.getFieldWithDefault(msg, 6, ''),
        vehicletype: jspb.Message.getFieldWithDefault(msg, 7, ''),
        status: jspb.Message.getFieldWithDefault(msg, 8, ''),
        description: jspb.Message.getFieldWithDefault(msg, 9, ''),
        stripepaymentid: jspb.Message.getFieldWithDefault(msg, 10, ''),
        divisiontype: jspb.Message.getFieldWithDefault(msg, 11, ''),
        createdat: jspb.Message.getFieldWithDefault(msg, 12, ''),
        updatedat: jspb.Message.getFieldWithDefault(msg, 13, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.Payment}
 */
proto.payment.Payment.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.Payment();
  return proto.payment.Payment.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.Payment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.Payment}
 */
proto.payment.Payment.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setDriverid(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setAmount(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setPlatformcommission(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setAirportportion(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setTerminal(value);
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.setVehicletype(value);
        break;
      case 8:
        var value = /** @type {string} */ (reader.readString());
        msg.setStatus(value);
        break;
      case 9:
        var value = /** @type {string} */ (reader.readString());
        msg.setDescription(value);
        break;
      case 10:
        var value = /** @type {string} */ (reader.readString());
        msg.setStripepaymentid(value);
        break;
      case 11:
        var value = /** @type {string} */ (reader.readString());
        msg.setDivisiontype(value);
        break;
      case 12:
        var value = /** @type {string} */ (reader.readString());
        msg.setCreatedat(value);
        break;
      case 13:
        var value = /** @type {string} */ (reader.readString());
        msg.setUpdatedat(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.Payment.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.payment.Payment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.Payment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.Payment.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getDriverid();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(3, f);
  }
  f = message.getPlatformcommission();
  if (f !== 0.0) {
    writer.writeDouble(4, f);
  }
  f = message.getAirportportion();
  if (f !== 0.0) {
    writer.writeDouble(5, f);
  }
  f = message.getTerminal();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
  f = message.getVehicletype();
  if (f.length > 0) {
    writer.writeString(7, f);
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(8, f);
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(9, f);
  }
  f = message.getStripepaymentid();
  if (f.length > 0) {
    writer.writeString(10, f);
  }
  f = message.getDivisiontype();
  if (f.length > 0) {
    writer.writeString(11, f);
  }
  f = message.getCreatedat();
  if (f.length > 0) {
    writer.writeString(12, f);
  }
  f = message.getUpdatedat();
  if (f.length > 0) {
    writer.writeString(13, f);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.payment.Payment.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.Payment} returns this
 */
proto.payment.Payment.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string driverId = 2;
 * @return {string}
 */
proto.payment.Payment.prototype.getDriverid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.Payment} returns this
 */
proto.payment.Payment.prototype.setDriverid = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional double amount = 3;
 * @return {number}
 */
proto.payment.Payment.prototype.getAmount = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.payment.Payment} returns this
 */
proto.payment.Payment.prototype.setAmount = function (value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};

/**
 * optional double platformCommission = 4;
 * @return {number}
 */
proto.payment.Payment.prototype.getPlatformcommission = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.payment.Payment} returns this
 */
proto.payment.Payment.prototype.setPlatformcommission = function (value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};

/**
 * optional double airportPortion = 5;
 * @return {number}
 */
proto.payment.Payment.prototype.getAirportportion = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.payment.Payment} returns this
 */
proto.payment.Payment.prototype.setAirportportion = function (value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};

/**
 * optional string terminal = 6;
 * @return {string}
 */
proto.payment.Payment.prototype.getTerminal = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.Payment} returns this
 */
proto.payment.Payment.prototype.setTerminal = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional string vehicleType = 7;
 * @return {string}
 */
proto.payment.Payment.prototype.getVehicletype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.Payment} returns this
 */
proto.payment.Payment.prototype.setVehicletype = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};

/**
 * optional string status = 8;
 * @return {string}
 */
proto.payment.Payment.prototype.getStatus = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.Payment} returns this
 */
proto.payment.Payment.prototype.setStatus = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};

/**
 * optional string description = 9;
 * @return {string}
 */
proto.payment.Payment.prototype.getDescription = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.Payment} returns this
 */
proto.payment.Payment.prototype.setDescription = function (value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};

/**
 * optional string stripePaymentId = 10;
 * @return {string}
 */
proto.payment.Payment.prototype.getStripepaymentid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.Payment} returns this
 */
proto.payment.Payment.prototype.setStripepaymentid = function (value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};

/**
 * optional string divisionType = 11;
 * @return {string}
 */
proto.payment.Payment.prototype.getDivisiontype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.Payment} returns this
 */
proto.payment.Payment.prototype.setDivisiontype = function (value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};

/**
 * optional string createdAt = 12;
 * @return {string}
 */
proto.payment.Payment.prototype.getCreatedat = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.Payment} returns this
 */
proto.payment.Payment.prototype.setCreatedat = function (value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};

/**
 * optional string updatedAt = 13;
 * @return {string}
 */
proto.payment.Payment.prototype.getUpdatedat = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ''));
};

/**
 * @param {string} value
 * @return {!proto.payment.Payment} returns this
 */
proto.payment.Payment.prototype.setUpdatedat = function (value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};

goog.object.extend(exports, proto.payment);
