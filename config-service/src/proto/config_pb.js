// source: config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = function () {
  if (this) {
    return this;
  }
  if (typeof window !== 'undefined') {
    return window;
  }
  if (typeof global !== 'undefined') {
    return global;
  }
  if (typeof self !== 'undefined') {
    return self;
  }
  return Function('return this')();
}.call(null);

goog.exportSymbol('proto.config.Config', null, global);
goog.exportSymbol('proto.config.ConfigRequest', null, global);
goog.exportSymbol('proto.config.ConfigResponse', null, global);
goog.exportSymbol('proto.config.FeeConfig', null, global);
goog.exportSymbol('proto.config.FeeConfigRequest', null, global);
goog.exportSymbol('proto.config.FeeConfigResponse', null, global);
goog.exportSymbol('proto.config.HealthRequest', null, global);
goog.exportSymbol('proto.config.HealthResponse', null, global);
goog.exportSymbol('proto.config.SystemConfigRequest', null, global);
goog.exportSymbol('proto.config.SystemConfigResponse', null, global);
goog.exportSymbol('proto.config.UpdateConfigRequest', null, global);
goog.exportSymbol('proto.config.UpdateFeeConfigRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.HealthRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.config.HealthRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.HealthRequest.displayName = 'proto.config.HealthRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.HealthResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.config.HealthResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.HealthResponse.displayName = 'proto.config.HealthResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.ConfigRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.config.ConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.ConfigRequest.displayName = 'proto.config.ConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.UpdateConfigRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.config.UpdateConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.UpdateConfigRequest.displayName =
    'proto.config.UpdateConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.FeeConfigRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.config.FeeConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.FeeConfigRequest.displayName = 'proto.config.FeeConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.UpdateFeeConfigRequest = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.config.UpdateFeeConfigRequest.repeatedFields_,
    null
  );
};
goog.inherits(proto.config.UpdateFeeConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.UpdateFeeConfigRequest.displayName =
    'proto.config.UpdateFeeConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.SystemConfigRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.config.SystemConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.SystemConfigRequest.displayName =
    'proto.config.SystemConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.ConfigResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.config.ConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.ConfigResponse.displayName = 'proto.config.ConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.FeeConfigResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.config.FeeConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.FeeConfigResponse.displayName = 'proto.config.FeeConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.SystemConfigResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.config.SystemConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.SystemConfigResponse.displayName =
    'proto.config.SystemConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.Config = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.config.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.Config.displayName = 'proto.config.Config';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.FeeConfig = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.config.FeeConfig.repeatedFields_,
    null
  );
};
goog.inherits(proto.config.FeeConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.FeeConfig.displayName = 'proto.config.FeeConfig';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.config.HealthRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.config.HealthRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.config.HealthRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.config.HealthRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        service: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.HealthRequest}
 */
proto.config.HealthRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.HealthRequest();
  return proto.config.HealthRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.HealthRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.HealthRequest}
 */
proto.config.HealthRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setService(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.HealthRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.config.HealthRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.HealthRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.HealthRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getService();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string service = 1;
 * @return {string}
 */
proto.config.HealthRequest.prototype.getService = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.HealthRequest} returns this
 */
proto.config.HealthRequest.prototype.setService = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.config.HealthResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.config.HealthResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.config.HealthResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.config.HealthResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        status: jspb.Message.getFieldWithDefault(msg, 1, ''),
        message: jspb.Message.getFieldWithDefault(msg, 2, ''),
        timestamp: jspb.Message.getFieldWithDefault(msg, 3, ''),
        configcount: jspb.Message.getFieldWithDefault(msg, 4, 0),
        feeconfigcount: jspb.Message.getFieldWithDefault(msg, 5, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.HealthResponse}
 */
proto.config.HealthResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.HealthResponse();
  return proto.config.HealthResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.HealthResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.HealthResponse}
 */
proto.config.HealthResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setStatus(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setTimestamp(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setConfigcount(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setFeeconfigcount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.HealthResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.config.HealthResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.HealthResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.HealthResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getConfigcount();
  if (f !== 0) {
    writer.writeInt32(4, f);
  }
  f = message.getFeeconfigcount();
  if (f !== 0) {
    writer.writeInt32(5, f);
  }
};

/**
 * optional string status = 1;
 * @return {string}
 */
proto.config.HealthResponse.prototype.getStatus = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.HealthResponse} returns this
 */
proto.config.HealthResponse.prototype.setStatus = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.config.HealthResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.HealthResponse} returns this
 */
proto.config.HealthResponse.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string timestamp = 3;
 * @return {string}
 */
proto.config.HealthResponse.prototype.getTimestamp = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.HealthResponse} returns this
 */
proto.config.HealthResponse.prototype.setTimestamp = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional int32 configCount = 4;
 * @return {number}
 */
proto.config.HealthResponse.prototype.getConfigcount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.config.HealthResponse} returns this
 */
proto.config.HealthResponse.prototype.setConfigcount = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional int32 feeConfigCount = 5;
 * @return {number}
 */
proto.config.HealthResponse.prototype.getFeeconfigcount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.config.HealthResponse} returns this
 */
proto.config.HealthResponse.prototype.setFeeconfigcount = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.config.ConfigRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.config.ConfigRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.config.ConfigRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.config.ConfigRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        key: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.ConfigRequest}
 */
proto.config.ConfigRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.ConfigRequest();
  return proto.config.ConfigRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.ConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.ConfigRequest}
 */
proto.config.ConfigRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setKey(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.ConfigRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.config.ConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.ConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.ConfigRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string key = 1;
 * @return {string}
 */
proto.config.ConfigRequest.prototype.getKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.ConfigRequest} returns this
 */
proto.config.ConfigRequest.prototype.setKey = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.config.UpdateConfigRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.config.UpdateConfigRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.config.UpdateConfigRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.config.UpdateConfigRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        key: jspb.Message.getFieldWithDefault(msg, 1, ''),
        value: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.UpdateConfigRequest}
 */
proto.config.UpdateConfigRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.UpdateConfigRequest();
  return proto.config.UpdateConfigRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.UpdateConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.UpdateConfigRequest}
 */
proto.config.UpdateConfigRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setKey(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setValue(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.UpdateConfigRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.config.UpdateConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.UpdateConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.UpdateConfigRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string key = 1;
 * @return {string}
 */
proto.config.UpdateConfigRequest.prototype.getKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.UpdateConfigRequest} returns this
 */
proto.config.UpdateConfigRequest.prototype.setKey = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string value = 2;
 * @return {string}
 */
proto.config.UpdateConfigRequest.prototype.getValue = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.UpdateConfigRequest} returns this
 */
proto.config.UpdateConfigRequest.prototype.setValue = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.config.FeeConfigRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.config.FeeConfigRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.config.FeeConfigRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.config.FeeConfigRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        terminal: jspb.Message.getFieldWithDefault(msg, 1, ''),
        vehicletype: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.FeeConfigRequest}
 */
proto.config.FeeConfigRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.FeeConfigRequest();
  return proto.config.FeeConfigRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.FeeConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.FeeConfigRequest}
 */
proto.config.FeeConfigRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setTerminal(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setVehicletype(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.FeeConfigRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.config.FeeConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.FeeConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.FeeConfigRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getTerminal();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getVehicletype();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string terminal = 1;
 * @return {string}
 */
proto.config.FeeConfigRequest.prototype.getTerminal = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.FeeConfigRequest} returns this
 */
proto.config.FeeConfigRequest.prototype.setTerminal = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string vehicleType = 2;
 * @return {string}
 */
proto.config.FeeConfigRequest.prototype.getVehicletype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.FeeConfigRequest} returns this
 */
proto.config.FeeConfigRequest.prototype.setVehicletype = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.config.UpdateFeeConfigRequest.repeatedFields_ = [8, 9];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.config.UpdateFeeConfigRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.config.UpdateFeeConfigRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.config.UpdateFeeConfigRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.config.UpdateFeeConfigRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        terminal: jspb.Message.getFieldWithDefault(msg, 1, ''),
        vehicletype: jspb.Message.getFieldWithDefault(msg, 2, ''),
        divisiontype: jspb.Message.getFieldWithDefault(msg, 3, ''),
        platformshare: jspb.Message.getFloatingPointFieldWithDefault(
          msg,
          4,
          0.0
        ),
        airportshare: jspb.Message.getFloatingPointFieldWithDefault(
          msg,
          5,
          0.0
        ),
        minfee: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
        maxfee: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
        applicableterminalsList:
          (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
        applicablevehicletypesList:
          (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.UpdateFeeConfigRequest}
 */
proto.config.UpdateFeeConfigRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.UpdateFeeConfigRequest();
  return proto.config.UpdateFeeConfigRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.UpdateFeeConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.UpdateFeeConfigRequest}
 */
proto.config.UpdateFeeConfigRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setTerminal(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setVehicletype(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setDivisiontype(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setPlatformshare(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setAirportshare(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setMinfee(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setMaxfee(value);
        break;
      case 8:
        var value = /** @type {string} */ (reader.readString());
        msg.addApplicableterminals(value);
        break;
      case 9:
        var value = /** @type {string} */ (reader.readString());
        msg.addApplicablevehicletypes(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.UpdateFeeConfigRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.config.UpdateFeeConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.UpdateFeeConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.UpdateFeeConfigRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getTerminal();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getVehicletype();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getDivisiontype();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getPlatformshare();
  if (f !== 0.0) {
    writer.writeDouble(4, f);
  }
  f = message.getAirportshare();
  if (f !== 0.0) {
    writer.writeDouble(5, f);
  }
  f = message.getMinfee();
  if (f !== 0.0) {
    writer.writeDouble(6, f);
  }
  f = message.getMaxfee();
  if (f !== 0.0) {
    writer.writeDouble(7, f);
  }
  f = message.getApplicableterminalsList();
  if (f.length > 0) {
    writer.writeRepeatedString(8, f);
  }
  f = message.getApplicablevehicletypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(9, f);
  }
};

/**
 * optional string terminal = 1;
 * @return {string}
 */
proto.config.UpdateFeeConfigRequest.prototype.getTerminal = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.UpdateFeeConfigRequest} returns this
 */
proto.config.UpdateFeeConfigRequest.prototype.setTerminal = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string vehicleType = 2;
 * @return {string}
 */
proto.config.UpdateFeeConfigRequest.prototype.getVehicletype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.UpdateFeeConfigRequest} returns this
 */
proto.config.UpdateFeeConfigRequest.prototype.setVehicletype = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string divisionType = 3;
 * @return {string}
 */
proto.config.UpdateFeeConfigRequest.prototype.getDivisiontype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.UpdateFeeConfigRequest} returns this
 */
proto.config.UpdateFeeConfigRequest.prototype.setDivisiontype = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional double platformShare = 4;
 * @return {number}
 */
proto.config.UpdateFeeConfigRequest.prototype.getPlatformshare = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.config.UpdateFeeConfigRequest} returns this
 */
proto.config.UpdateFeeConfigRequest.prototype.setPlatformshare = function (
  value
) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};

/**
 * optional double airportShare = 5;
 * @return {number}
 */
proto.config.UpdateFeeConfigRequest.prototype.getAirportshare = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.config.UpdateFeeConfigRequest} returns this
 */
proto.config.UpdateFeeConfigRequest.prototype.setAirportshare = function (
  value
) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};

/**
 * optional double minFee = 6;
 * @return {number}
 */
proto.config.UpdateFeeConfigRequest.prototype.getMinfee = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.config.UpdateFeeConfigRequest} returns this
 */
proto.config.UpdateFeeConfigRequest.prototype.setMinfee = function (value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};

/**
 * optional double maxFee = 7;
 * @return {number}
 */
proto.config.UpdateFeeConfigRequest.prototype.getMaxfee = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.config.UpdateFeeConfigRequest} returns this
 */
proto.config.UpdateFeeConfigRequest.prototype.setMaxfee = function (value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};

/**
 * repeated string applicableTerminals = 8;
 * @return {!Array<string>}
 */
proto.config.UpdateFeeConfigRequest.prototype.getApplicableterminalsList =
  function () {
    return /** @type {!Array<string>} */ (
      jspb.Message.getRepeatedField(this, 8)
    );
  };

/**
 * @param {!Array<string>} value
 * @return {!proto.config.UpdateFeeConfigRequest} returns this
 */
proto.config.UpdateFeeConfigRequest.prototype.setApplicableterminalsList =
  function (value) {
    return jspb.Message.setField(this, 8, value || []);
  };

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.config.UpdateFeeConfigRequest} returns this
 */
proto.config.UpdateFeeConfigRequest.prototype.addApplicableterminals =
  function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.config.UpdateFeeConfigRequest} returns this
 */
proto.config.UpdateFeeConfigRequest.prototype.clearApplicableterminalsList =
  function () {
    return this.setApplicableterminalsList([]);
  };

/**
 * repeated string applicableVehicleTypes = 9;
 * @return {!Array<string>}
 */
proto.config.UpdateFeeConfigRequest.prototype.getApplicablevehicletypesList =
  function () {
    return /** @type {!Array<string>} */ (
      jspb.Message.getRepeatedField(this, 9)
    );
  };

/**
 * @param {!Array<string>} value
 * @return {!proto.config.UpdateFeeConfigRequest} returns this
 */
proto.config.UpdateFeeConfigRequest.prototype.setApplicablevehicletypesList =
  function (value) {
    return jspb.Message.setField(this, 9, value || []);
  };

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.config.UpdateFeeConfigRequest} returns this
 */
proto.config.UpdateFeeConfigRequest.prototype.addApplicablevehicletypes =
  function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.config.UpdateFeeConfigRequest} returns this
 */
proto.config.UpdateFeeConfigRequest.prototype.clearApplicablevehicletypesList =
  function () {
    return this.setApplicablevehicletypesList([]);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.config.SystemConfigRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.config.SystemConfigRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.config.SystemConfigRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.config.SystemConfigRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        section: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.SystemConfigRequest}
 */
proto.config.SystemConfigRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.SystemConfigRequest();
  return proto.config.SystemConfigRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.SystemConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.SystemConfigRequest}
 */
proto.config.SystemConfigRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setSection(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.SystemConfigRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.config.SystemConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.SystemConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.SystemConfigRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getSection();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string section = 1;
 * @return {string}
 */
proto.config.SystemConfigRequest.prototype.getSection = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.SystemConfigRequest} returns this
 */
proto.config.SystemConfigRequest.prototype.setSection = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.config.ConfigResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.config.ConfigResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.config.ConfigResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.config.ConfigResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        message: jspb.Message.getFieldWithDefault(msg, 2, ''),
        config:
          (f = msg.getConfig()) &&
          proto.config.Config.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.ConfigResponse}
 */
proto.config.ConfigResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.ConfigResponse();
  return proto.config.ConfigResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.ConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.ConfigResponse}
 */
proto.config.ConfigResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 3:
        var value = new proto.config.Config();
        reader.readMessage(
          value,
          proto.config.Config.deserializeBinaryFromReader
        );
        msg.setConfig(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.ConfigResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.config.ConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.ConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.ConfigResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(3, f, proto.config.Config.serializeBinaryToWriter);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.config.ConfigResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.config.ConfigResponse} returns this
 */
proto.config.ConfigResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.config.ConfigResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.ConfigResponse} returns this
 */
proto.config.ConfigResponse.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional Config config = 3;
 * @return {?proto.config.Config}
 */
proto.config.ConfigResponse.prototype.getConfig = function () {
  return /** @type{?proto.config.Config} */ (
    jspb.Message.getWrapperField(this, proto.config.Config, 3)
  );
};

/**
 * @param {?proto.config.Config|undefined} value
 * @return {!proto.config.ConfigResponse} returns this
 */
proto.config.ConfigResponse.prototype.setConfig = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.config.ConfigResponse} returns this
 */
proto.config.ConfigResponse.prototype.clearConfig = function () {
  return this.setConfig(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.config.ConfigResponse.prototype.hasConfig = function () {
  return jspb.Message.getField(this, 3) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.config.FeeConfigResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.config.FeeConfigResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.config.FeeConfigResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.config.FeeConfigResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        message: jspb.Message.getFieldWithDefault(msg, 2, ''),
        config:
          (f = msg.getConfig()) &&
          proto.config.FeeConfig.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.FeeConfigResponse}
 */
proto.config.FeeConfigResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.FeeConfigResponse();
  return proto.config.FeeConfigResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.FeeConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.FeeConfigResponse}
 */
proto.config.FeeConfigResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 3:
        var value = new proto.config.FeeConfig();
        reader.readMessage(
          value,
          proto.config.FeeConfig.deserializeBinaryFromReader
        );
        msg.setConfig(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.FeeConfigResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.config.FeeConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.FeeConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.FeeConfigResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(3, f, proto.config.FeeConfig.serializeBinaryToWriter);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.config.FeeConfigResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.config.FeeConfigResponse} returns this
 */
proto.config.FeeConfigResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.config.FeeConfigResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.FeeConfigResponse} returns this
 */
proto.config.FeeConfigResponse.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional FeeConfig config = 3;
 * @return {?proto.config.FeeConfig}
 */
proto.config.FeeConfigResponse.prototype.getConfig = function () {
  return /** @type{?proto.config.FeeConfig} */ (
    jspb.Message.getWrapperField(this, proto.config.FeeConfig, 3)
  );
};

/**
 * @param {?proto.config.FeeConfig|undefined} value
 * @return {!proto.config.FeeConfigResponse} returns this
 */
proto.config.FeeConfigResponse.prototype.setConfig = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.config.FeeConfigResponse} returns this
 */
proto.config.FeeConfigResponse.prototype.clearConfig = function () {
  return this.setConfig(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.config.FeeConfigResponse.prototype.hasConfig = function () {
  return jspb.Message.getField(this, 3) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.config.SystemConfigResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.config.SystemConfigResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.config.SystemConfigResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.config.SystemConfigResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        message: jspb.Message.getFieldWithDefault(msg, 2, ''),
        configsMap: (f = msg.getConfigsMap())
          ? f.toObject(includeInstance, undefined)
          : [],
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.SystemConfigResponse}
 */
proto.config.SystemConfigResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.SystemConfigResponse();
  return proto.config.SystemConfigResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.SystemConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.SystemConfigResponse}
 */
proto.config.SystemConfigResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 3:
        var value = msg.getConfigsMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            '',
            ''
          );
        });
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.SystemConfigResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.config.SystemConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.SystemConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.SystemConfigResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getConfigsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      3,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeString
    );
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.config.SystemConfigResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.config.SystemConfigResponse} returns this
 */
proto.config.SystemConfigResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.config.SystemConfigResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.SystemConfigResponse} returns this
 */
proto.config.SystemConfigResponse.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * map<string, string> configs = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.config.SystemConfigResponse.prototype.getConfigsMap = function (
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,string>} */ (
    jspb.Message.getMapField(this, 3, opt_noLazyCreate, null)
  );
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.config.SystemConfigResponse} returns this
 */
proto.config.SystemConfigResponse.prototype.clearConfigsMap = function () {
  this.getConfigsMap().clear();
  return this;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.config.Config.prototype.toObject = function (opt_includeInstance) {
    return proto.config.Config.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.config.Config} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.config.Config.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        key: jspb.Message.getFieldWithDefault(msg, 1, ''),
        value: jspb.Message.getFieldWithDefault(msg, 2, ''),
        updatedat: jspb.Message.getFieldWithDefault(msg, 3, ''),
        description: jspb.Message.getFieldWithDefault(msg, 4, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.Config}
 */
proto.config.Config.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.Config();
  return proto.config.Config.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.Config}
 */
proto.config.Config.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setKey(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setValue(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setUpdatedat(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setDescription(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.Config.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.config.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.Config.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getUpdatedat();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional string key = 1;
 * @return {string}
 */
proto.config.Config.prototype.getKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.Config} returns this
 */
proto.config.Config.prototype.setKey = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string value = 2;
 * @return {string}
 */
proto.config.Config.prototype.getValue = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.Config} returns this
 */
proto.config.Config.prototype.setValue = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string updatedAt = 3;
 * @return {string}
 */
proto.config.Config.prototype.getUpdatedat = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.Config} returns this
 */
proto.config.Config.prototype.setUpdatedat = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string description = 4;
 * @return {string}
 */
proto.config.Config.prototype.getDescription = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.Config} returns this
 */
proto.config.Config.prototype.setDescription = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.config.FeeConfig.repeatedFields_ = [8, 9];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.config.FeeConfig.prototype.toObject = function (opt_includeInstance) {
    return proto.config.FeeConfig.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.config.FeeConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.config.FeeConfig.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        terminal: jspb.Message.getFieldWithDefault(msg, 1, ''),
        vehicletype: jspb.Message.getFieldWithDefault(msg, 2, ''),
        divisiontype: jspb.Message.getFieldWithDefault(msg, 3, ''),
        platformshare: jspb.Message.getFloatingPointFieldWithDefault(
          msg,
          4,
          0.0
        ),
        airportshare: jspb.Message.getFloatingPointFieldWithDefault(
          msg,
          5,
          0.0
        ),
        minfee: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
        maxfee: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
        applicableterminalsList:
          (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
        applicablevehicletypesList:
          (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
        updatedat: jspb.Message.getFieldWithDefault(msg, 10, ''),
        isactive: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.FeeConfig}
 */
proto.config.FeeConfig.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.FeeConfig();
  return proto.config.FeeConfig.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.FeeConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.FeeConfig}
 */
proto.config.FeeConfig.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setTerminal(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setVehicletype(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setDivisiontype(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setPlatformshare(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setAirportshare(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setMinfee(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setMaxfee(value);
        break;
      case 8:
        var value = /** @type {string} */ (reader.readString());
        msg.addApplicableterminals(value);
        break;
      case 9:
        var value = /** @type {string} */ (reader.readString());
        msg.addApplicablevehicletypes(value);
        break;
      case 10:
        var value = /** @type {string} */ (reader.readString());
        msg.setUpdatedat(value);
        break;
      case 11:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsactive(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.FeeConfig.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.config.FeeConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.FeeConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.FeeConfig.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTerminal();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getVehicletype();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getDivisiontype();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getPlatformshare();
  if (f !== 0.0) {
    writer.writeDouble(4, f);
  }
  f = message.getAirportshare();
  if (f !== 0.0) {
    writer.writeDouble(5, f);
  }
  f = message.getMinfee();
  if (f !== 0.0) {
    writer.writeDouble(6, f);
  }
  f = message.getMaxfee();
  if (f !== 0.0) {
    writer.writeDouble(7, f);
  }
  f = message.getApplicableterminalsList();
  if (f.length > 0) {
    writer.writeRepeatedString(8, f);
  }
  f = message.getApplicablevehicletypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(9, f);
  }
  f = message.getUpdatedat();
  if (f.length > 0) {
    writer.writeString(10, f);
  }
  f = message.getIsactive();
  if (f) {
    writer.writeBool(11, f);
  }
};

/**
 * optional string terminal = 1;
 * @return {string}
 */
proto.config.FeeConfig.prototype.getTerminal = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.FeeConfig} returns this
 */
proto.config.FeeConfig.prototype.setTerminal = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string vehicleType = 2;
 * @return {string}
 */
proto.config.FeeConfig.prototype.getVehicletype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.FeeConfig} returns this
 */
proto.config.FeeConfig.prototype.setVehicletype = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string divisionType = 3;
 * @return {string}
 */
proto.config.FeeConfig.prototype.getDivisiontype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.FeeConfig} returns this
 */
proto.config.FeeConfig.prototype.setDivisiontype = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional double platformShare = 4;
 * @return {number}
 */
proto.config.FeeConfig.prototype.getPlatformshare = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.config.FeeConfig} returns this
 */
proto.config.FeeConfig.prototype.setPlatformshare = function (value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};

/**
 * optional double airportShare = 5;
 * @return {number}
 */
proto.config.FeeConfig.prototype.getAirportshare = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.config.FeeConfig} returns this
 */
proto.config.FeeConfig.prototype.setAirportshare = function (value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};

/**
 * optional double minFee = 6;
 * @return {number}
 */
proto.config.FeeConfig.prototype.getMinfee = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.config.FeeConfig} returns this
 */
proto.config.FeeConfig.prototype.setMinfee = function (value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};

/**
 * optional double maxFee = 7;
 * @return {number}
 */
proto.config.FeeConfig.prototype.getMaxfee = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.config.FeeConfig} returns this
 */
proto.config.FeeConfig.prototype.setMaxfee = function (value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};

/**
 * repeated string applicableTerminals = 8;
 * @return {!Array<string>}
 */
proto.config.FeeConfig.prototype.getApplicableterminalsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.config.FeeConfig} returns this
 */
proto.config.FeeConfig.prototype.setApplicableterminalsList = function (value) {
  return jspb.Message.setField(this, 8, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.config.FeeConfig} returns this
 */
proto.config.FeeConfig.prototype.addApplicableterminals = function (
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.config.FeeConfig} returns this
 */
proto.config.FeeConfig.prototype.clearApplicableterminalsList = function () {
  return this.setApplicableterminalsList([]);
};

/**
 * repeated string applicableVehicleTypes = 9;
 * @return {!Array<string>}
 */
proto.config.FeeConfig.prototype.getApplicablevehicletypesList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.config.FeeConfig} returns this
 */
proto.config.FeeConfig.prototype.setApplicablevehicletypesList = function (
  value
) {
  return jspb.Message.setField(this, 9, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.config.FeeConfig} returns this
 */
proto.config.FeeConfig.prototype.addApplicablevehicletypes = function (
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.config.FeeConfig} returns this
 */
proto.config.FeeConfig.prototype.clearApplicablevehicletypesList = function () {
  return this.setApplicablevehicletypesList([]);
};

/**
 * optional string updatedAt = 10;
 * @return {string}
 */
proto.config.FeeConfig.prototype.getUpdatedat = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ''));
};

/**
 * @param {string} value
 * @return {!proto.config.FeeConfig} returns this
 */
proto.config.FeeConfig.prototype.setUpdatedat = function (value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};

/**
 * optional bool isActive = 11;
 * @return {boolean}
 */
proto.config.FeeConfig.prototype.getIsactive = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 11, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.config.FeeConfig} returns this
 */
proto.config.FeeConfig.prototype.setIsactive = function (value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};

goog.object.extend(exports, proto.config);
