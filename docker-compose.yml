# docker-compose.yml
version: '3.8'

services:
  # API Gateway
  api-gateway:
    build: ./api-gateway
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - PORT=3000
    depends_on:
      - auth-service
      - user-service
      - vehicle-service
      - geo-service
    networks:
      - api-gateway-network
      - auth-network
      - user-network
      - vehicle-network
      - geo-network

  # Auth Service with its own Redis
  auth-service:
    build: ./auth-service
    ports:
      - '50051:50051'
    environment:
      - NODE_ENV=production
      - PORT=50051
      - MONGODB_URI=mongodb://auth-mongodb:27017/auth
      - REDIS_URL=redis://auth-redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-here
      - JWT_REFRESH_SECRET=your-super-secret-refresh-key-here
    depends_on:
      - auth-mongodb
      - auth-redis
    networks:
      - auth-network

  auth-mongodb:
    image: mongo:6.0
    environment:
      - MONGO_INITDB_DATABASE=auth
    volumes:
      - auth_mongodb_data:/data/db
      - ./auth-service/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - auth-network

  auth-redis:
    image: redis:7-alpine
    volumes:
      - auth_redis_data:/data
      - ./redis/auth-redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - auth-network

  # User Service with its own Redis
  user-service:
    build: ./user-service
    ports:
      - '50052:50052'
    environment:
      - NODE_ENV=production
      - PORT=50052
      - MONGODB_URI=mongodb://user-mongodb:27017/user
      - REDIS_URL=redis://user-redis:6379
    depends_on:
      - user-mongodb
      - user-redis
    networks:
      - user-network

  user-mongodb:
    image: mongo:6.0
    environment:
      - MONGO_INITDB_DATABASE=user
    volumes:
      - user_mongodb_data:/data/db
    networks:
      - user-network

  user-redis:
    image: redis:7-alpine
    volumes:
      - user_redis_data:/data
      - ./redis/user-redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - user-network

  # Vehicle Service with its own Redis
  vehicle-service:
    build: ./vehicle-service
    ports:
      - '50053:50053'
    environment:
      - NODE_ENV=production
      - PORT=50053
      - MONGODB_URI=mongodb://vehicle-mongodb:27017/vehicle
      - REDIS_URL=redis://vehicle-redis:6379
    depends_on:
      - vehicle-mongodb
      - vehicle-redis
    networks:
      - vehicle-network

  vehicle-mongodb:
    image: mongo:6.0
    environment:
      - MONGO_INITDB_DATABASE=vehicle
    volumes:
      - vehicle_mongodb_data:/data/db
    networks:
      - vehicle-network

  vehicle-redis:
    image: redis:7-alpine
    volumes:
      - vehicle_redis_data:/data
      - ./redis/vehicle-redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - vehicle-network

  # Geo Service with its own Redis
  geo-service:
    build: ./geo-service
    ports:
      - '50054:50054'
    environment:
      - NODE_ENV=production
      - PORT=50054
      - POSTGRES_URL=postgresql://geo-postgres:5432/geo
      - REDIS_URL=redis://geo-redis:6379
    depends_on:
      - geo-postgres
      - geo-redis
    networks:
      - geo-network

  geo-postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=geo
      - POSTGRES_USER=geo
      - POSTGRES_PASSWORD=geo-password
    volumes:
      - geo_postgres_data:/var/lib/postgresql/data
      - ./geo-service/scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - geo-network

  geo-redis:
    image: redis:7-alpine
    volumes:
      - geo_redis_data:/data
      - ./redis/geo-redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - geo-network

volumes:
  auth_mongodb_data:
  auth_redis_data:
  user_mongodb_data:
  user_redis_data:
  vehicle_mongodb_data:
  vehicle_redis_data:
  geo_postgres_data:
  geo_redis_data:

networks:
  api-gateway-network:
    driver: bridge
  auth-network:
    driver: bridge
  user-network:
    driver: bridge
  vehicle-network:
    driver: bridge
  geo-network:
    driver: bridge
