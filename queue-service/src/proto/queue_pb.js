// source: queue.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = function () {
  if (this) {
    return this;
  }
  if (typeof window !== 'undefined') {
    return window;
  }
  if (typeof global !== 'undefined') {
    return global;
  }
  if (typeof self !== 'undefined') {
    return self;
  }
  return Function('return this')();
}.call(null);

goog.exportSymbol('proto.queue.AddToQueueRequest', null, global);
goog.exportSymbol('proto.queue.ClosureRequest', null, global);
goog.exportSymbol('proto.queue.ClosureResponse', null, global);
goog.exportSymbol('proto.queue.Driver', null, global);
goog.exportSymbol('proto.queue.DriverPositionRequest', null, global);
goog.exportSymbol('proto.queue.DriverPositionResponse', null, global);
goog.exportSymbol('proto.queue.HealthRequest', null, global);
goog.exportSymbol('proto.queue.HealthResponse', null, global);
goog.exportSymbol('proto.queue.QueueResponse', null, global);
goog.exportSymbol('proto.queue.QueueStatusRequest', null, global);
goog.exportSymbol('proto.queue.QueueStatusResponse', null, global);
goog.exportSymbol('proto.queue.ReleaseRequest', null, global);
goog.exportSymbol('proto.queue.ReleaseResponse', null, global);
goog.exportSymbol('proto.queue.RemoveFromQueueRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.queue.HealthRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.queue.HealthRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.queue.HealthRequest.displayName = 'proto.queue.HealthRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.queue.HealthResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.queue.HealthResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.queue.HealthResponse.displayName = 'proto.queue.HealthResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.queue.AddToQueueRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.queue.AddToQueueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.queue.AddToQueueRequest.displayName = 'proto.queue.AddToQueueRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.queue.RemoveFromQueueRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.queue.RemoveFromQueueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.queue.RemoveFromQueueRequest.displayName =
    'proto.queue.RemoveFromQueueRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.queue.QueueStatusRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.queue.QueueStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.queue.QueueStatusRequest.displayName = 'proto.queue.QueueStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.queue.DriverPositionRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.queue.DriverPositionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.queue.DriverPositionRequest.displayName =
    'proto.queue.DriverPositionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.queue.ReleaseRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.queue.ReleaseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.queue.ReleaseRequest.displayName = 'proto.queue.ReleaseRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.queue.ClosureRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.queue.ClosureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.queue.ClosureRequest.displayName = 'proto.queue.ClosureRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.queue.QueueResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.queue.QueueResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.queue.QueueResponse.displayName = 'proto.queue.QueueResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.queue.QueueStatusResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.queue.QueueStatusResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.queue.QueueStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.queue.QueueStatusResponse.displayName =
    'proto.queue.QueueStatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.queue.DriverPositionResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.queue.DriverPositionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.queue.DriverPositionResponse.displayName =
    'proto.queue.DriverPositionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.queue.ReleaseResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.queue.ReleaseResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.queue.ReleaseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.queue.ReleaseResponse.displayName = 'proto.queue.ReleaseResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.queue.ClosureResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.queue.ClosureResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.queue.ClosureResponse.displayName = 'proto.queue.ClosureResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.queue.Driver = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.queue.Driver, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.queue.Driver.displayName = 'proto.queue.Driver';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.queue.HealthRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.queue.HealthRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.queue.HealthRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.queue.HealthRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        service: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.queue.HealthRequest}
 */
proto.queue.HealthRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.queue.HealthRequest();
  return proto.queue.HealthRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.queue.HealthRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.queue.HealthRequest}
 */
proto.queue.HealthRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setService(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.queue.HealthRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.queue.HealthRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.queue.HealthRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.queue.HealthRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getService();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string service = 1;
 * @return {string}
 */
proto.queue.HealthRequest.prototype.getService = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.HealthRequest} returns this
 */
proto.queue.HealthRequest.prototype.setService = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.queue.HealthResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.queue.HealthResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.queue.HealthResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.queue.HealthResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        status: jspb.Message.getFieldWithDefault(msg, 1, ''),
        message: jspb.Message.getFieldWithDefault(msg, 2, ''),
        timestamp: jspb.Message.getFieldWithDefault(msg, 3, ''),
        primaryqueuecount: jspb.Message.getFieldWithDefault(msg, 4, 0),
        secondaryqueuecount: jspb.Message.getFieldWithDefault(msg, 5, 0),
        priorityaccesscount: jspb.Message.getFieldWithDefault(msg, 6, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.queue.HealthResponse}
 */
proto.queue.HealthResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.queue.HealthResponse();
  return proto.queue.HealthResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.queue.HealthResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.queue.HealthResponse}
 */
proto.queue.HealthResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setStatus(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setTimestamp(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPrimaryqueuecount(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setSecondaryqueuecount(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPriorityaccesscount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.queue.HealthResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.queue.HealthResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.queue.HealthResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.queue.HealthResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getPrimaryqueuecount();
  if (f !== 0) {
    writer.writeInt32(4, f);
  }
  f = message.getSecondaryqueuecount();
  if (f !== 0) {
    writer.writeInt32(5, f);
  }
  f = message.getPriorityaccesscount();
  if (f !== 0) {
    writer.writeInt32(6, f);
  }
};

/**
 * optional string status = 1;
 * @return {string}
 */
proto.queue.HealthResponse.prototype.getStatus = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.HealthResponse} returns this
 */
proto.queue.HealthResponse.prototype.setStatus = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.queue.HealthResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.HealthResponse} returns this
 */
proto.queue.HealthResponse.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string timestamp = 3;
 * @return {string}
 */
proto.queue.HealthResponse.prototype.getTimestamp = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.HealthResponse} returns this
 */
proto.queue.HealthResponse.prototype.setTimestamp = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional int32 primaryQueueCount = 4;
 * @return {number}
 */
proto.queue.HealthResponse.prototype.getPrimaryqueuecount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.queue.HealthResponse} returns this
 */
proto.queue.HealthResponse.prototype.setPrimaryqueuecount = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional int32 secondaryQueueCount = 5;
 * @return {number}
 */
proto.queue.HealthResponse.prototype.getSecondaryqueuecount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.queue.HealthResponse} returns this
 */
proto.queue.HealthResponse.prototype.setSecondaryqueuecount = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional int32 priorityAccessCount = 6;
 * @return {number}
 */
proto.queue.HealthResponse.prototype.getPriorityaccesscount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.queue.HealthResponse} returns this
 */
proto.queue.HealthResponse.prototype.setPriorityaccesscount = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.queue.AddToQueueRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.queue.AddToQueueRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.queue.AddToQueueRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.queue.AddToQueueRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        driverid: jspb.Message.getFieldWithDefault(msg, 1, ''),
        vehicletype: jspb.Message.getFieldWithDefault(msg, 2, ''),
        queuetype: jspb.Message.getFieldWithDefault(msg, 3, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.queue.AddToQueueRequest}
 */
proto.queue.AddToQueueRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.queue.AddToQueueRequest();
  return proto.queue.AddToQueueRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.queue.AddToQueueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.queue.AddToQueueRequest}
 */
proto.queue.AddToQueueRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setDriverid(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setVehicletype(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setQueuetype(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.queue.AddToQueueRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.queue.AddToQueueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.queue.AddToQueueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.queue.AddToQueueRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getDriverid();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getVehicletype();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getQueuetype();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional string driverId = 1;
 * @return {string}
 */
proto.queue.AddToQueueRequest.prototype.getDriverid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.AddToQueueRequest} returns this
 */
proto.queue.AddToQueueRequest.prototype.setDriverid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string vehicleType = 2;
 * @return {string}
 */
proto.queue.AddToQueueRequest.prototype.getVehicletype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.AddToQueueRequest} returns this
 */
proto.queue.AddToQueueRequest.prototype.setVehicletype = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string queueType = 3;
 * @return {string}
 */
proto.queue.AddToQueueRequest.prototype.getQueuetype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.AddToQueueRequest} returns this
 */
proto.queue.AddToQueueRequest.prototype.setQueuetype = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.queue.RemoveFromQueueRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.queue.RemoveFromQueueRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.queue.RemoveFromQueueRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.queue.RemoveFromQueueRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        driverid: jspb.Message.getFieldWithDefault(msg, 1, ''),
        queuetype: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.queue.RemoveFromQueueRequest}
 */
proto.queue.RemoveFromQueueRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.queue.RemoveFromQueueRequest();
  return proto.queue.RemoveFromQueueRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.queue.RemoveFromQueueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.queue.RemoveFromQueueRequest}
 */
proto.queue.RemoveFromQueueRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setDriverid(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setQueuetype(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.queue.RemoveFromQueueRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.queue.RemoveFromQueueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.queue.RemoveFromQueueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.queue.RemoveFromQueueRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getDriverid();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getQueuetype();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string driverId = 1;
 * @return {string}
 */
proto.queue.RemoveFromQueueRequest.prototype.getDriverid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.RemoveFromQueueRequest} returns this
 */
proto.queue.RemoveFromQueueRequest.prototype.setDriverid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string queueType = 2;
 * @return {string}
 */
proto.queue.RemoveFromQueueRequest.prototype.getQueuetype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.RemoveFromQueueRequest} returns this
 */
proto.queue.RemoveFromQueueRequest.prototype.setQueuetype = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.queue.QueueStatusRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.queue.QueueStatusRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.queue.QueueStatusRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.queue.QueueStatusRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        queuetype: jspb.Message.getFieldWithDefault(msg, 1, ''),
        vehicletype: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.queue.QueueStatusRequest}
 */
proto.queue.QueueStatusRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.queue.QueueStatusRequest();
  return proto.queue.QueueStatusRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.queue.QueueStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.queue.QueueStatusRequest}
 */
proto.queue.QueueStatusRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setQueuetype(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setVehicletype(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.queue.QueueStatusRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.queue.QueueStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.queue.QueueStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.queue.QueueStatusRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getQueuetype();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getVehicletype();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string queueType = 1;
 * @return {string}
 */
proto.queue.QueueStatusRequest.prototype.getQueuetype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.QueueStatusRequest} returns this
 */
proto.queue.QueueStatusRequest.prototype.setQueuetype = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string vehicleType = 2;
 * @return {string}
 */
proto.queue.QueueStatusRequest.prototype.getVehicletype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.QueueStatusRequest} returns this
 */
proto.queue.QueueStatusRequest.prototype.setVehicletype = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.queue.DriverPositionRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.queue.DriverPositionRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.queue.DriverPositionRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.queue.DriverPositionRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        driverid: jspb.Message.getFieldWithDefault(msg, 1, ''),
        queuetype: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.queue.DriverPositionRequest}
 */
proto.queue.DriverPositionRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.queue.DriverPositionRequest();
  return proto.queue.DriverPositionRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.queue.DriverPositionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.queue.DriverPositionRequest}
 */
proto.queue.DriverPositionRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setDriverid(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setQueuetype(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.queue.DriverPositionRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.queue.DriverPositionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.queue.DriverPositionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.queue.DriverPositionRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getDriverid();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getQueuetype();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string driverId = 1;
 * @return {string}
 */
proto.queue.DriverPositionRequest.prototype.getDriverid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.DriverPositionRequest} returns this
 */
proto.queue.DriverPositionRequest.prototype.setDriverid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string queueType = 2;
 * @return {string}
 */
proto.queue.DriverPositionRequest.prototype.getQueuetype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.DriverPositionRequest} returns this
 */
proto.queue.DriverPositionRequest.prototype.setQueuetype = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.queue.ReleaseRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.queue.ReleaseRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.queue.ReleaseRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.queue.ReleaseRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        queuetype: jspb.Message.getFieldWithDefault(msg, 1, ''),
        count: jspb.Message.getFieldWithDefault(msg, 2, 0),
        terminal: jspb.Message.getFieldWithDefault(msg, 3, ''),
        vehiclerequirementsMap: (f = msg.getVehiclerequirementsMap())
          ? f.toObject(includeInstance, undefined)
          : [],
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.queue.ReleaseRequest}
 */
proto.queue.ReleaseRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.queue.ReleaseRequest();
  return proto.queue.ReleaseRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.queue.ReleaseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.queue.ReleaseRequest}
 */
proto.queue.ReleaseRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setQueuetype(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setCount(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setTerminal(value);
        break;
      case 4:
        var value = msg.getVehiclerequirementsMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readInt32,
            null,
            '',
            0
          );
        });
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.queue.ReleaseRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.queue.ReleaseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.queue.ReleaseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.queue.ReleaseRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getQueuetype();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(2, f);
  }
  f = message.getTerminal();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getVehiclerequirementsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      4,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeInt32
    );
  }
};

/**
 * optional string queueType = 1;
 * @return {string}
 */
proto.queue.ReleaseRequest.prototype.getQueuetype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.ReleaseRequest} returns this
 */
proto.queue.ReleaseRequest.prototype.setQueuetype = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.queue.ReleaseRequest.prototype.getCount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.queue.ReleaseRequest} returns this
 */
proto.queue.ReleaseRequest.prototype.setCount = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional string terminal = 3;
 * @return {string}
 */
proto.queue.ReleaseRequest.prototype.getTerminal = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.ReleaseRequest} returns this
 */
proto.queue.ReleaseRequest.prototype.setTerminal = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * map<string, int32> vehicleRequirements = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.queue.ReleaseRequest.prototype.getVehiclerequirementsMap = function (
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,number>} */ (
    jspb.Message.getMapField(this, 4, opt_noLazyCreate, null)
  );
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.queue.ReleaseRequest} returns this
 */
proto.queue.ReleaseRequest.prototype.clearVehiclerequirementsMap = function () {
  this.getVehiclerequirementsMap().clear();
  return this;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.queue.ClosureRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.queue.ClosureRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.queue.ClosureRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.queue.ClosureRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        reason: jspb.Message.getFieldWithDefault(msg, 1, ''),
        priorityexpiryhours: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.queue.ClosureRequest}
 */
proto.queue.ClosureRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.queue.ClosureRequest();
  return proto.queue.ClosureRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.queue.ClosureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.queue.ClosureRequest}
 */
proto.queue.ClosureRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setReason(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPriorityexpiryhours(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.queue.ClosureRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.queue.ClosureRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.queue.ClosureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.queue.ClosureRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPriorityexpiryhours();
  if (f !== 0) {
    writer.writeInt32(2, f);
  }
};

/**
 * optional string reason = 1;
 * @return {string}
 */
proto.queue.ClosureRequest.prototype.getReason = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.ClosureRequest} returns this
 */
proto.queue.ClosureRequest.prototype.setReason = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional int32 priorityExpiryHours = 2;
 * @return {number}
 */
proto.queue.ClosureRequest.prototype.getPriorityexpiryhours = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.queue.ClosureRequest} returns this
 */
proto.queue.ClosureRequest.prototype.setPriorityexpiryhours = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.queue.QueueResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.queue.QueueResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.queue.QueueResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.queue.QueueResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        message: jspb.Message.getFieldWithDefault(msg, 2, ''),
        position: jspb.Message.getFieldWithDefault(msg, 3, 0),
        queuetype: jspb.Message.getFieldWithDefault(msg, 4, ''),
        haspriority: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.queue.QueueResponse}
 */
proto.queue.QueueResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.queue.QueueResponse();
  return proto.queue.QueueResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.queue.QueueResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.queue.QueueResponse}
 */
proto.queue.QueueResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPosition(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setQueuetype(value);
        break;
      case 5:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setHaspriority(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.queue.QueueResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.queue.QueueResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.queue.QueueResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.queue.QueueResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getPosition();
  if (f !== 0) {
    writer.writeInt32(3, f);
  }
  f = message.getQueuetype();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getHaspriority();
  if (f) {
    writer.writeBool(5, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.queue.QueueResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.queue.QueueResponse} returns this
 */
proto.queue.QueueResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.queue.QueueResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.QueueResponse} returns this
 */
proto.queue.QueueResponse.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional int32 position = 3;
 * @return {number}
 */
proto.queue.QueueResponse.prototype.getPosition = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.queue.QueueResponse} returns this
 */
proto.queue.QueueResponse.prototype.setPosition = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional string queueType = 4;
 * @return {string}
 */
proto.queue.QueueResponse.prototype.getQueuetype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.QueueResponse} returns this
 */
proto.queue.QueueResponse.prototype.setQueuetype = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional bool hasPriority = 5;
 * @return {boolean}
 */
proto.queue.QueueResponse.prototype.getHaspriority = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 5, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.queue.QueueResponse} returns this
 */
proto.queue.QueueResponse.prototype.setHaspriority = function (value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.queue.QueueStatusResponse.repeatedFields_ = [3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.queue.QueueStatusResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.queue.QueueStatusResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.queue.QueueStatusResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.queue.QueueStatusResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        count: jspb.Message.getFieldWithDefault(msg, 2, 0),
        driversList: jspb.Message.toObjectList(
          msg.getDriversList(),
          proto.queue.Driver.toObject,
          includeInstance
        ),
        queuetype: jspb.Message.getFieldWithDefault(msg, 4, ''),
        vehiclecountsMap: (f = msg.getVehiclecountsMap())
          ? f.toObject(includeInstance, undefined)
          : [],
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.queue.QueueStatusResponse}
 */
proto.queue.QueueStatusResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.queue.QueueStatusResponse();
  return proto.queue.QueueStatusResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.queue.QueueStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.queue.QueueStatusResponse}
 */
proto.queue.QueueStatusResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setCount(value);
        break;
      case 3:
        var value = new proto.queue.Driver();
        reader.readMessage(
          value,
          proto.queue.Driver.deserializeBinaryFromReader
        );
        msg.addDrivers(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setQueuetype(value);
        break;
      case 5:
        var value = msg.getVehiclecountsMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readInt32,
            null,
            '',
            0
          );
        });
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.queue.QueueStatusResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.queue.QueueStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.queue.QueueStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.queue.QueueStatusResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(2, f);
  }
  f = message.getDriversList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.queue.Driver.serializeBinaryToWriter
    );
  }
  f = message.getQueuetype();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getVehiclecountsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      5,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeInt32
    );
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.queue.QueueStatusResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.queue.QueueStatusResponse} returns this
 */
proto.queue.QueueStatusResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.queue.QueueStatusResponse.prototype.getCount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.queue.QueueStatusResponse} returns this
 */
proto.queue.QueueStatusResponse.prototype.setCount = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * repeated Driver drivers = 3;
 * @return {!Array<!proto.queue.Driver>}
 */
proto.queue.QueueStatusResponse.prototype.getDriversList = function () {
  return /** @type{!Array<!proto.queue.Driver>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.queue.Driver, 3)
  );
};

/**
 * @param {!Array<!proto.queue.Driver>} value
 * @return {!proto.queue.QueueStatusResponse} returns this
 */
proto.queue.QueueStatusResponse.prototype.setDriversList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!proto.queue.Driver=} opt_value
 * @param {number=} opt_index
 * @return {!proto.queue.Driver}
 */
proto.queue.QueueStatusResponse.prototype.addDrivers = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    3,
    opt_value,
    proto.queue.Driver,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.queue.QueueStatusResponse} returns this
 */
proto.queue.QueueStatusResponse.prototype.clearDriversList = function () {
  return this.setDriversList([]);
};

/**
 * optional string queueType = 4;
 * @return {string}
 */
proto.queue.QueueStatusResponse.prototype.getQueuetype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.QueueStatusResponse} returns this
 */
proto.queue.QueueStatusResponse.prototype.setQueuetype = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * map<string, int32> vehicleCounts = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.queue.QueueStatusResponse.prototype.getVehiclecountsMap = function (
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,number>} */ (
    jspb.Message.getMapField(this, 5, opt_noLazyCreate, null)
  );
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.queue.QueueStatusResponse} returns this
 */
proto.queue.QueueStatusResponse.prototype.clearVehiclecountsMap = function () {
  this.getVehiclecountsMap().clear();
  return this;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.queue.DriverPositionResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.queue.DriverPositionResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.queue.DriverPositionResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.queue.DriverPositionResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        position: jspb.Message.getFieldWithDefault(msg, 2, 0),
        queuetype: jspb.Message.getFieldWithDefault(msg, 3, ''),
        message: jspb.Message.getFieldWithDefault(msg, 4, ''),
        haspriority: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.queue.DriverPositionResponse}
 */
proto.queue.DriverPositionResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.queue.DriverPositionResponse();
  return proto.queue.DriverPositionResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.queue.DriverPositionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.queue.DriverPositionResponse}
 */
proto.queue.DriverPositionResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPosition(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setQueuetype(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 5:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setHaspriority(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.queue.DriverPositionResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.queue.DriverPositionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.queue.DriverPositionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.queue.DriverPositionResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getPosition();
  if (f !== 0) {
    writer.writeInt32(2, f);
  }
  f = message.getQueuetype();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getHaspriority();
  if (f) {
    writer.writeBool(5, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.queue.DriverPositionResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.queue.DriverPositionResponse} returns this
 */
proto.queue.DriverPositionResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional int32 position = 2;
 * @return {number}
 */
proto.queue.DriverPositionResponse.prototype.getPosition = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.queue.DriverPositionResponse} returns this
 */
proto.queue.DriverPositionResponse.prototype.setPosition = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional string queueType = 3;
 * @return {string}
 */
proto.queue.DriverPositionResponse.prototype.getQueuetype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.DriverPositionResponse} returns this
 */
proto.queue.DriverPositionResponse.prototype.setQueuetype = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string message = 4;
 * @return {string}
 */
proto.queue.DriverPositionResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.DriverPositionResponse} returns this
 */
proto.queue.DriverPositionResponse.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional bool hasPriority = 5;
 * @return {boolean}
 */
proto.queue.DriverPositionResponse.prototype.getHaspriority = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 5, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.queue.DriverPositionResponse} returns this
 */
proto.queue.DriverPositionResponse.prototype.setHaspriority = function (value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.queue.ReleaseResponse.repeatedFields_ = [4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.queue.ReleaseResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.queue.ReleaseResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.queue.ReleaseResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.queue.ReleaseResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        message: jspb.Message.getFieldWithDefault(msg, 2, ''),
        releasedcount: jspb.Message.getFieldWithDefault(msg, 3, 0),
        driveridsList:
          (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
        terminal: jspb.Message.getFieldWithDefault(msg, 5, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.queue.ReleaseResponse}
 */
proto.queue.ReleaseResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.queue.ReleaseResponse();
  return proto.queue.ReleaseResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.queue.ReleaseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.queue.ReleaseResponse}
 */
proto.queue.ReleaseResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setReleasedcount(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.addDriverids(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setTerminal(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.queue.ReleaseResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.queue.ReleaseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.queue.ReleaseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.queue.ReleaseResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getReleasedcount();
  if (f !== 0) {
    writer.writeInt32(3, f);
  }
  f = message.getDriveridsList();
  if (f.length > 0) {
    writer.writeRepeatedString(4, f);
  }
  f = message.getTerminal();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.queue.ReleaseResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.queue.ReleaseResponse} returns this
 */
proto.queue.ReleaseResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.queue.ReleaseResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.ReleaseResponse} returns this
 */
proto.queue.ReleaseResponse.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional int32 releasedCount = 3;
 * @return {number}
 */
proto.queue.ReleaseResponse.prototype.getReleasedcount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.queue.ReleaseResponse} returns this
 */
proto.queue.ReleaseResponse.prototype.setReleasedcount = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * repeated string driverIds = 4;
 * @return {!Array<string>}
 */
proto.queue.ReleaseResponse.prototype.getDriveridsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.queue.ReleaseResponse} returns this
 */
proto.queue.ReleaseResponse.prototype.setDriveridsList = function (value) {
  return jspb.Message.setField(this, 4, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.queue.ReleaseResponse} returns this
 */
proto.queue.ReleaseResponse.prototype.addDriverids = function (
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.queue.ReleaseResponse} returns this
 */
proto.queue.ReleaseResponse.prototype.clearDriveridsList = function () {
  return this.setDriveridsList([]);
};

/**
 * optional string terminal = 5;
 * @return {string}
 */
proto.queue.ReleaseResponse.prototype.getTerminal = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.ReleaseResponse} returns this
 */
proto.queue.ReleaseResponse.prototype.setTerminal = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.queue.ClosureResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.queue.ClosureResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.queue.ClosureResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.queue.ClosureResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        message: jspb.Message.getFieldWithDefault(msg, 2, ''),
        driversmoved: jspb.Message.getFieldWithDefault(msg, 3, 0),
        priorityexpiry: jspb.Message.getFieldWithDefault(msg, 4, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.queue.ClosureResponse}
 */
proto.queue.ClosureResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.queue.ClosureResponse();
  return proto.queue.ClosureResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.queue.ClosureResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.queue.ClosureResponse}
 */
proto.queue.ClosureResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setDriversmoved(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setPriorityexpiry(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.queue.ClosureResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.queue.ClosureResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.queue.ClosureResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.queue.ClosureResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getDriversmoved();
  if (f !== 0) {
    writer.writeInt32(3, f);
  }
  f = message.getPriorityexpiry();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.queue.ClosureResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.queue.ClosureResponse} returns this
 */
proto.queue.ClosureResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.queue.ClosureResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.ClosureResponse} returns this
 */
proto.queue.ClosureResponse.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional int32 driversMoved = 3;
 * @return {number}
 */
proto.queue.ClosureResponse.prototype.getDriversmoved = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.queue.ClosureResponse} returns this
 */
proto.queue.ClosureResponse.prototype.setDriversmoved = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional string priorityExpiry = 4;
 * @return {string}
 */
proto.queue.ClosureResponse.prototype.getPriorityexpiry = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.ClosureResponse} returns this
 */
proto.queue.ClosureResponse.prototype.setPriorityexpiry = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.queue.Driver.prototype.toObject = function (opt_includeInstance) {
    return proto.queue.Driver.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.queue.Driver} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.queue.Driver.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
        name: jspb.Message.getFieldWithDefault(msg, 2, ''),
        vehicletype: jspb.Message.getFieldWithDefault(msg, 3, ''),
        position: jspb.Message.getFieldWithDefault(msg, 4, 0),
        queuetype: jspb.Message.getFieldWithDefault(msg, 5, ''),
        joinedat: jspb.Message.getFieldWithDefault(msg, 6, ''),
        haspriority: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.queue.Driver}
 */
proto.queue.Driver.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.queue.Driver();
  return proto.queue.Driver.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.queue.Driver} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.queue.Driver}
 */
proto.queue.Driver.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setVehicletype(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPosition(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setQueuetype(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setJoinedat(value);
        break;
      case 7:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setHaspriority(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.queue.Driver.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.queue.Driver.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.queue.Driver} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.queue.Driver.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getVehicletype();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getPosition();
  if (f !== 0) {
    writer.writeInt32(4, f);
  }
  f = message.getQueuetype();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getJoinedat();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
  f = message.getHaspriority();
  if (f) {
    writer.writeBool(7, f);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.queue.Driver.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.Driver} returns this
 */
proto.queue.Driver.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string name = 2;
 * @return {string}
 */
proto.queue.Driver.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.Driver} returns this
 */
proto.queue.Driver.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string vehicleType = 3;
 * @return {string}
 */
proto.queue.Driver.prototype.getVehicletype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.Driver} returns this
 */
proto.queue.Driver.prototype.setVehicletype = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional int32 position = 4;
 * @return {number}
 */
proto.queue.Driver.prototype.getPosition = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.queue.Driver} returns this
 */
proto.queue.Driver.prototype.setPosition = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional string queueType = 5;
 * @return {string}
 */
proto.queue.Driver.prototype.getQueuetype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.Driver} returns this
 */
proto.queue.Driver.prototype.setQueuetype = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string joinedAt = 6;
 * @return {string}
 */
proto.queue.Driver.prototype.getJoinedat = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * @param {string} value
 * @return {!proto.queue.Driver} returns this
 */
proto.queue.Driver.prototype.setJoinedat = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional bool hasPriority = 7;
 * @return {boolean}
 */
proto.queue.Driver.prototype.getHaspriority = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 7, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.queue.Driver} returns this
 */
proto.queue.Driver.prototype.setHaspriority = function (value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};

goog.object.extend(exports, proto.queue);
