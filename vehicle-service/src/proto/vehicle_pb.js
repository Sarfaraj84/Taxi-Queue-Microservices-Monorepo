// source: vehicle.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = function () {
  if (this) {
    return this;
  }
  if (typeof window !== 'undefined') {
    return window;
  }
  if (typeof global !== 'undefined') {
    return global;
  }
  if (typeof self !== 'undefined') {
    return self;
  }
  return Function('return this')();
}.call(null);

goog.exportSymbol('proto.vehicle.ActiveVehicleRequest', null, global);
goog.exportSymbol('proto.vehicle.DriverRequest', null, global);
goog.exportSymbol('proto.vehicle.DriverVehiclesResponse', null, global);
goog.exportSymbol('proto.vehicle.HealthRequest', null, global);
goog.exportSymbol('proto.vehicle.HealthResponse', null, global);
goog.exportSymbol('proto.vehicle.Vehicle', null, global);
goog.exportSymbol('proto.vehicle.VehicleRequest', null, global);
goog.exportSymbol('proto.vehicle.VehicleResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.HealthRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vehicle.HealthRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.HealthRequest.displayName = 'proto.vehicle.HealthRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.HealthResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vehicle.HealthResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.HealthResponse.displayName = 'proto.vehicle.HealthResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.VehicleRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vehicle.VehicleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.VehicleRequest.displayName = 'proto.vehicle.VehicleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.VehicleResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vehicle.VehicleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.VehicleResponse.displayName = 'proto.vehicle.VehicleResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.ActiveVehicleRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vehicle.ActiveVehicleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.ActiveVehicleRequest.displayName =
    'proto.vehicle.ActiveVehicleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.DriverRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vehicle.DriverRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.DriverRequest.displayName = 'proto.vehicle.DriverRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.DriverVehiclesResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.vehicle.DriverVehiclesResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.vehicle.DriverVehiclesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.DriverVehiclesResponse.displayName =
    'proto.vehicle.DriverVehiclesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.Vehicle = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vehicle.Vehicle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.Vehicle.displayName = 'proto.vehicle.Vehicle';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.vehicle.HealthRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.vehicle.HealthRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.vehicle.HealthRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.vehicle.HealthRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        service: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.HealthRequest}
 */
proto.vehicle.HealthRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.HealthRequest();
  return proto.vehicle.HealthRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.HealthRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.HealthRequest}
 */
proto.vehicle.HealthRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setService(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.HealthRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.HealthRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.HealthRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.HealthRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getService();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string service = 1;
 * @return {string}
 */
proto.vehicle.HealthRequest.prototype.getService = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.vehicle.HealthRequest} returns this
 */
proto.vehicle.HealthRequest.prototype.setService = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.vehicle.HealthResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.vehicle.HealthResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.vehicle.HealthResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.vehicle.HealthResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        status: jspb.Message.getFieldWithDefault(msg, 1, ''),
        message: jspb.Message.getFieldWithDefault(msg, 2, ''),
        timestamp: jspb.Message.getFieldWithDefault(msg, 3, ''),
        vehiclecount: jspb.Message.getFieldWithDefault(msg, 4, 0),
        drivercount: jspb.Message.getFieldWithDefault(msg, 5, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.HealthResponse}
 */
proto.vehicle.HealthResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.HealthResponse();
  return proto.vehicle.HealthResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.HealthResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.HealthResponse}
 */
proto.vehicle.HealthResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setStatus(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setTimestamp(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setVehiclecount(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setDrivercount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.HealthResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.HealthResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.HealthResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.HealthResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getVehiclecount();
  if (f !== 0) {
    writer.writeInt32(4, f);
  }
  f = message.getDrivercount();
  if (f !== 0) {
    writer.writeInt32(5, f);
  }
};

/**
 * optional string status = 1;
 * @return {string}
 */
proto.vehicle.HealthResponse.prototype.getStatus = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.vehicle.HealthResponse} returns this
 */
proto.vehicle.HealthResponse.prototype.setStatus = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.vehicle.HealthResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.vehicle.HealthResponse} returns this
 */
proto.vehicle.HealthResponse.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string timestamp = 3;
 * @return {string}
 */
proto.vehicle.HealthResponse.prototype.getTimestamp = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.vehicle.HealthResponse} returns this
 */
proto.vehicle.HealthResponse.prototype.setTimestamp = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional int32 vehicleCount = 4;
 * @return {number}
 */
proto.vehicle.HealthResponse.prototype.getVehiclecount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.vehicle.HealthResponse} returns this
 */
proto.vehicle.HealthResponse.prototype.setVehiclecount = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional int32 driverCount = 5;
 * @return {number}
 */
proto.vehicle.HealthResponse.prototype.getDrivercount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.vehicle.HealthResponse} returns this
 */
proto.vehicle.HealthResponse.prototype.setDrivercount = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.vehicle.VehicleRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.vehicle.VehicleRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.vehicle.VehicleRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.vehicle.VehicleRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        driverid: jspb.Message.getFieldWithDefault(msg, 1, ''),
        registrationnumber: jspb.Message.getFieldWithDefault(msg, 2, ''),
        vehicletype: jspb.Message.getFieldWithDefault(msg, 3, ''),
        make: jspb.Message.getFieldWithDefault(msg, 4, ''),
        model: jspb.Message.getFieldWithDefault(msg, 5, ''),
        year: jspb.Message.getFieldWithDefault(msg, 6, 0),
        color: jspb.Message.getFieldWithDefault(msg, 7, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.VehicleRequest}
 */
proto.vehicle.VehicleRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.VehicleRequest();
  return proto.vehicle.VehicleRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.VehicleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.VehicleRequest}
 */
proto.vehicle.VehicleRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setDriverid(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setRegistrationnumber(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setVehicletype(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setMake(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setModel(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setYear(value);
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.setColor(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.VehicleRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.VehicleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.VehicleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.VehicleRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getDriverid();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getRegistrationnumber();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getVehicletype();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getMake();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getYear();
  if (f !== 0) {
    writer.writeInt32(6, f);
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(7, f);
  }
};

/**
 * optional string driverId = 1;
 * @return {string}
 */
proto.vehicle.VehicleRequest.prototype.getDriverid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.vehicle.VehicleRequest} returns this
 */
proto.vehicle.VehicleRequest.prototype.setDriverid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string registrationNumber = 2;
 * @return {string}
 */
proto.vehicle.VehicleRequest.prototype.getRegistrationnumber = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.vehicle.VehicleRequest} returns this
 */
proto.vehicle.VehicleRequest.prototype.setRegistrationnumber = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string vehicleType = 3;
 * @return {string}
 */
proto.vehicle.VehicleRequest.prototype.getVehicletype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.vehicle.VehicleRequest} returns this
 */
proto.vehicle.VehicleRequest.prototype.setVehicletype = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string make = 4;
 * @return {string}
 */
proto.vehicle.VehicleRequest.prototype.getMake = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.vehicle.VehicleRequest} returns this
 */
proto.vehicle.VehicleRequest.prototype.setMake = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string model = 5;
 * @return {string}
 */
proto.vehicle.VehicleRequest.prototype.getModel = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.vehicle.VehicleRequest} returns this
 */
proto.vehicle.VehicleRequest.prototype.setModel = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional int32 year = 6;
 * @return {number}
 */
proto.vehicle.VehicleRequest.prototype.getYear = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.vehicle.VehicleRequest} returns this
 */
proto.vehicle.VehicleRequest.prototype.setYear = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional string color = 7;
 * @return {string}
 */
proto.vehicle.VehicleRequest.prototype.getColor = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''));
};

/**
 * @param {string} value
 * @return {!proto.vehicle.VehicleRequest} returns this
 */
proto.vehicle.VehicleRequest.prototype.setColor = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.vehicle.VehicleResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.vehicle.VehicleResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.vehicle.VehicleResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.vehicle.VehicleResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        message: jspb.Message.getFieldWithDefault(msg, 2, ''),
        vehicleid: jspb.Message.getFieldWithDefault(msg, 3, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.VehicleResponse}
 */
proto.vehicle.VehicleResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.VehicleResponse();
  return proto.vehicle.VehicleResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.VehicleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.VehicleResponse}
 */
proto.vehicle.VehicleResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setVehicleid(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.VehicleResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.VehicleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.VehicleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.VehicleResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getVehicleid();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.vehicle.VehicleResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.vehicle.VehicleResponse} returns this
 */
proto.vehicle.VehicleResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.vehicle.VehicleResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.vehicle.VehicleResponse} returns this
 */
proto.vehicle.VehicleResponse.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string vehicleId = 3;
 * @return {string}
 */
proto.vehicle.VehicleResponse.prototype.getVehicleid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.vehicle.VehicleResponse} returns this
 */
proto.vehicle.VehicleResponse.prototype.setVehicleid = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.vehicle.ActiveVehicleRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.vehicle.ActiveVehicleRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.vehicle.ActiveVehicleRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.vehicle.ActiveVehicleRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        driverid: jspb.Message.getFieldWithDefault(msg, 1, ''),
        vehicleid: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.ActiveVehicleRequest}
 */
proto.vehicle.ActiveVehicleRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.ActiveVehicleRequest();
  return proto.vehicle.ActiveVehicleRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.ActiveVehicleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.ActiveVehicleRequest}
 */
proto.vehicle.ActiveVehicleRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setDriverid(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setVehicleid(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.ActiveVehicleRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.ActiveVehicleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.ActiveVehicleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.ActiveVehicleRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getDriverid();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getVehicleid();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string driverId = 1;
 * @return {string}
 */
proto.vehicle.ActiveVehicleRequest.prototype.getDriverid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.vehicle.ActiveVehicleRequest} returns this
 */
proto.vehicle.ActiveVehicleRequest.prototype.setDriverid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string vehicleId = 2;
 * @return {string}
 */
proto.vehicle.ActiveVehicleRequest.prototype.getVehicleid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.vehicle.ActiveVehicleRequest} returns this
 */
proto.vehicle.ActiveVehicleRequest.prototype.setVehicleid = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.vehicle.DriverRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.vehicle.DriverRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.vehicle.DriverRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.vehicle.DriverRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        driverid: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.DriverRequest}
 */
proto.vehicle.DriverRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.DriverRequest();
  return proto.vehicle.DriverRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.DriverRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.DriverRequest}
 */
proto.vehicle.DriverRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setDriverid(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.DriverRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.DriverRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.DriverRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.DriverRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getDriverid();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string driverId = 1;
 * @return {string}
 */
proto.vehicle.DriverRequest.prototype.getDriverid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.vehicle.DriverRequest} returns this
 */
proto.vehicle.DriverRequest.prototype.setDriverid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vehicle.DriverVehiclesResponse.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.vehicle.DriverVehiclesResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.vehicle.DriverVehiclesResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.vehicle.DriverVehiclesResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.vehicle.DriverVehiclesResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        vehiclesList: jspb.Message.toObjectList(
          msg.getVehiclesList(),
          proto.vehicle.Vehicle.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.DriverVehiclesResponse}
 */
proto.vehicle.DriverVehiclesResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.DriverVehiclesResponse();
  return proto.vehicle.DriverVehiclesResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.DriverVehiclesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.DriverVehiclesResponse}
 */
proto.vehicle.DriverVehiclesResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = new proto.vehicle.Vehicle();
        reader.readMessage(
          value,
          proto.vehicle.Vehicle.deserializeBinaryFromReader
        );
        msg.addVehicles(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.DriverVehiclesResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.DriverVehiclesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.DriverVehiclesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.DriverVehiclesResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getVehiclesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.vehicle.Vehicle.serializeBinaryToWriter
    );
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.vehicle.DriverVehiclesResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.vehicle.DriverVehiclesResponse} returns this
 */
proto.vehicle.DriverVehiclesResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * repeated Vehicle vehicles = 2;
 * @return {!Array<!proto.vehicle.Vehicle>}
 */
proto.vehicle.DriverVehiclesResponse.prototype.getVehiclesList = function () {
  return /** @type{!Array<!proto.vehicle.Vehicle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vehicle.Vehicle, 2)
  );
};

/**
 * @param {!Array<!proto.vehicle.Vehicle>} value
 * @return {!proto.vehicle.DriverVehiclesResponse} returns this
 */
proto.vehicle.DriverVehiclesResponse.prototype.setVehiclesList = function (
  value
) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.vehicle.Vehicle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vehicle.Vehicle}
 */
proto.vehicle.DriverVehiclesResponse.prototype.addVehicles = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.vehicle.Vehicle,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vehicle.DriverVehiclesResponse} returns this
 */
proto.vehicle.DriverVehiclesResponse.prototype.clearVehiclesList = function () {
  return this.setVehiclesList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.vehicle.Vehicle.prototype.toObject = function (opt_includeInstance) {
    return proto.vehicle.Vehicle.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.vehicle.Vehicle} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.vehicle.Vehicle.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
        registrationnumber: jspb.Message.getFieldWithDefault(msg, 2, ''),
        vehicletype: jspb.Message.getFieldWithDefault(msg, 3, ''),
        make: jspb.Message.getFieldWithDefault(msg, 4, ''),
        model: jspb.Message.getFieldWithDefault(msg, 5, ''),
        year: jspb.Message.getFieldWithDefault(msg, 6, 0),
        color: jspb.Message.getFieldWithDefault(msg, 7, ''),
        isactive: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
        isapproved: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.Vehicle}
 */
proto.vehicle.Vehicle.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.Vehicle();
  return proto.vehicle.Vehicle.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.Vehicle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.Vehicle}
 */
proto.vehicle.Vehicle.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setRegistrationnumber(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setVehicletype(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setMake(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setModel(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setYear(value);
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.setColor(value);
        break;
      case 8:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsactive(value);
        break;
      case 9:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsapproved(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.Vehicle.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.Vehicle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.Vehicle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.Vehicle.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getRegistrationnumber();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getVehicletype();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getMake();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getYear();
  if (f !== 0) {
    writer.writeInt32(6, f);
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(7, f);
  }
  f = message.getIsactive();
  if (f) {
    writer.writeBool(8, f);
  }
  f = message.getIsapproved();
  if (f) {
    writer.writeBool(9, f);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.vehicle.Vehicle.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.vehicle.Vehicle} returns this
 */
proto.vehicle.Vehicle.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string registrationNumber = 2;
 * @return {string}
 */
proto.vehicle.Vehicle.prototype.getRegistrationnumber = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.vehicle.Vehicle} returns this
 */
proto.vehicle.Vehicle.prototype.setRegistrationnumber = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string vehicleType = 3;
 * @return {string}
 */
proto.vehicle.Vehicle.prototype.getVehicletype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.vehicle.Vehicle} returns this
 */
proto.vehicle.Vehicle.prototype.setVehicletype = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string make = 4;
 * @return {string}
 */
proto.vehicle.Vehicle.prototype.getMake = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.vehicle.Vehicle} returns this
 */
proto.vehicle.Vehicle.prototype.setMake = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string model = 5;
 * @return {string}
 */
proto.vehicle.Vehicle.prototype.getModel = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.vehicle.Vehicle} returns this
 */
proto.vehicle.Vehicle.prototype.setModel = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional int32 year = 6;
 * @return {number}
 */
proto.vehicle.Vehicle.prototype.getYear = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.vehicle.Vehicle} returns this
 */
proto.vehicle.Vehicle.prototype.setYear = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional string color = 7;
 * @return {string}
 */
proto.vehicle.Vehicle.prototype.getColor = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''));
};

/**
 * @param {string} value
 * @return {!proto.vehicle.Vehicle} returns this
 */
proto.vehicle.Vehicle.prototype.setColor = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};

/**
 * optional bool isActive = 8;
 * @return {boolean}
 */
proto.vehicle.Vehicle.prototype.getIsactive = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 8, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.vehicle.Vehicle} returns this
 */
proto.vehicle.Vehicle.prototype.setIsactive = function (value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};

/**
 * optional bool isApproved = 9;
 * @return {boolean}
 */
proto.vehicle.Vehicle.prototype.getIsapproved = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 9, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.vehicle.Vehicle} returns this
 */
proto.vehicle.Vehicle.prototype.setIsapproved = function (value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};

goog.object.extend(exports, proto.vehicle);
